{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1458462167000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1458460056000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1458460056000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1458460056000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1458460056000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1458460056000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1458460056000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1458460056000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1458460056000},{"_id":"themes/next/_config.yml","hash":"0d80b613ec2ce331aa954823c02688840f578fec","modified":1462178867000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462178306000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462178306000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462178306000},{"_id":"source/_posts/angular-essential.md","hash":"6c6d3d228ef1ca56b27e2124a733ed0e26d59cfe","modified":1462177724000},{"_id":"source/_posts/angular-nav-auto-active.md","hash":"5afb0ee8d678b374e0ce5c6d4eba08b560fe4d12","modified":1462177852000},{"_id":"source/_posts/angular-ng-cloak-directive.md","hash":"1fb1bf1c5be4b249941118ce0d9c3f4d304ce330","modified":1462177884000},{"_id":"source/_posts/chrome-file-protocol-support-ajax.md","hash":"0a9ae37101a5337c0b6873bb2fcb6f5c9585e346","modified":1462177840000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1458457731000},{"_id":"source/_posts/javascript-recurring-cycle.md","hash":"3a5057111e25f6a840957f326fc4aded39bed14b","modified":1462177624000},{"_id":"source/_posts/modulariztion-introduction.md","hash":"7c56360ccf7d1ecfaefc4abbdfb6fccfbfced3ef","modified":1462177685000},{"_id":"source/_posts/node-essential-file-system.md","hash":"db6a0a349e286cf4945b7bed5f0a0f0cfee6fe88","modified":1462177757000},{"_id":"source/_posts/node-essential-module-npm.md","hash":"3954267905231841bf5e2624aa66392b72e3e86f","modified":1462177787000},{"_id":"source/_posts/node-essential-summary.md","hash":"e4adf458584edf972bed5f7ae89f8edbf56b41e8","modified":1462177591000},{"_id":"source/_posts/ruby-sass-chinese-error.md","hash":"040b04bb13d4fc480b2bd13576b2a34c710d6c0e","modified":1462178779000},{"_id":"source/_posts/taobao-mirrors-rubygems.md","hash":"eb7354b71fbd4adea8cfc02aceb00cf7f922c408","modified":1462177498000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1458460056000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462178306000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1458460056000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1458460056000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1458460056000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1458460056000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1458460056000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1458460056000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1458460056000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1458460056000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1458460056000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1458460056000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1462178306000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1458460056000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1458460056000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1458460056000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1458460056000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1458460056000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1458460056000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1458460056000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1458460056000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1458460056000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1458460056000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1458460056000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"ac433d14fc9aba84ae0fb6447feacb490d0bf3b5","modified":1462178306000},{"_id":"themes/next/layout/_macro/post.swig","hash":"ae280b8bc49b87e3b86ce1a131191c37d6aa37b4","modified":1462178306000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"70bd1f11a558a7fc4b8fd7860377f31e0357ceb6","modified":1462178306000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1458460056000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1462178306000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1458460056000},{"_id":"themes/next/layout/_partials/head.swig","hash":"53bf077755e217a2b5ae107da62b6a824a0baa52","modified":1462178306000},{"_id":"themes/next/layout/_partials/header.swig","hash":"7739068b69f87ae641dea19c3445169ae80d5df4","modified":1458460056000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1458460056000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1458460056000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1458460056000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1458460056000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462178306000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1458460056000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1458460056000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1458460056000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1458460056000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1458460056000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1458460056000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1458460056000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1458460056000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1458460056000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1458460056000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1458460056000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458460056000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1458460056000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1458460056000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1458460056000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1458460056000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1458460056000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1458460056000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1458460056000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1458460056000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1458460056000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1458460056000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1458460056000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1458460056000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462178306000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"2fc4a0d2c825a512f39c0eadd78452e90615465a","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462178306000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1458460056000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1458460056000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462178306000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"4e49707c99c8bbcfa0a607dfdaff0fbb7dffd2a3","modified":1458460056000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1458460056000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"11d443fc97648d2965d7f8bad9f4a493996fe62f","modified":1462178306000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"2676996e819af2079c552f755ab7933939e151cd","modified":1462178306000},{"_id":"themes/next/source/css/_variables/default.styl","hash":"8ec3307fe42d738b1bbda4b6419d0995f5560222","modified":1458460056000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1458460056000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1458460056000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1458460056000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1458460056000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1458460056000},{"_id":"themes/next/source/js/src/utils.js","hash":"a3a3375de818964f4cbed4d0e2c2f97ccee7199e","modified":1462178306000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1458460056000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1458460056000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462178306000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1458460056000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1458460056000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1458460056000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"4c84903d6a15a903235eec04a560fdeda80c12f3","modified":1462178306000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1458460056000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462178306000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6d57b257fca5c679f144fdd49d79b10f526435a3","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1458460056000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1458460056000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462178306000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1458460056000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1458460056000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1458460056000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1458460056000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e340071ee392f55b32c540d690198f157e588433","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"99d994bd19895a4aaa2fa8d12801ec72dd3cf118","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"7a2941bbce9b433f0ce6fc04055cad10eec0f953","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"89fef1caf94caf76ca09c643b83b0b4d4e417e08","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"58fb7604b44e3f56d880bbbd95d0baface38c4ee","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1458460056000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1458460056000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1458460056000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1458460056000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1462178089000},{"_id":"themes/next/.git/config","hash":"4f3f646ae68986c81ef7962e0154d840faa39522","modified":1462178306000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1462178089000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1462178089000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1462178089000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1462178089000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1462178089000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1462178089000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1462178089000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1462178089000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1462178089000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1462178089000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1462178089000},{"_id":"themes/next/.git/objects/pack/pack-6e3ad5155c1b2ab7ce354535972f857c448ca189.idx","hash":"f97e8f7287adf2280d74a01e81cb2544f051471e","modified":1462178306000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1462178306000},{"_id":"themes/next/.git/logs/HEAD","hash":"46980482a30c8fb92a8cd246132f3294ebdec798","modified":1462178306000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"46980482a30c8fb92a8cd246132f3294ebdec798","modified":1462178306000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"46980482a30c8fb92a8cd246132f3294ebdec798","modified":1462178306000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462178306000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462178306000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"36db00417ab0f7639c4cc95ab6e20a7a69be9560","modified":1462178306000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1462178306000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1462178306000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462178306000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462178306000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462178306000},{"_id":"themes/next/.git/objects/pack/pack-6e3ad5155c1b2ab7ce354535972f857c448ca189.pack","hash":"8781b39da6a5b49985815bab2438bf6b34e26f44","modified":1462178306000},{"_id":"themes/next/.git/index","hash":"7fc1b4e863e638cc11dc840afd7384cf318e9fe4","modified":1462178306000},{"_id":"themes/next/.git/packed-refs","hash":"ce148ebe150cf0327bd2dd64743d5923345a780c","modified":1462178306000},{"_id":"themes/next/.git/shallow","hash":"7e99086b68c6759735c20c7fbcabafa53505507b","modified":1462178247000},{"_id":"themes/next/.git/refs/heads/master","hash":"7e99086b68c6759735c20c7fbcabafa53505507b","modified":1462178306000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Angular 基础入门","date":"2016-05-02T08:22:14.000Z","_content":"## 简介\n\n### 什么是AngularJS\n\n- 一个功能非常完备的前端框架，通过增强HTML的方式提供一种便捷开发Web应用程序的方式\n- 其核心特点就是几乎无任何DOM操作，让开发人员的精力和时间全部集中于业务\n- MVC的特性增强了代码的结构和可维护性，应对需求的变化做出最小的改动\n\n\n### 为什么使用AngularJS\n\n- 更少的代码实现更强劲的功能\n- 提供了很多在传统后端开发中大量使用的思想和方式，提高前台代码的结构和可维护性\n\n\n### 使用AnuglarJS的流程\n\n1. 在HTML中引入Angular.js文件\n2. 在自己的代码中定义一个AngularJS的模块\n3. 将模块作用到HTML中的某个节点\n4. 根据模块的功能定义控制器\n5. 根据当前页面原型设计$scope的结构\n6. 通过$scope暴露数据和行为\n7. 将暴露出来的数据和行为通过特定的指令绑定到HTML节点中\n\n\n### MVC\n\n- 一种应用程序的设计思想，其目的是为了对应用程序的组成进行划分，让结构更加清晰可维护性更高，确保每个原件都有明确的单一职责\n\n![MVC](http://files.wedn.net/2016/03/mvc-1458840221606.png)\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 模块\n\n> - 可以通过`angular.module()`方法操作模块\n> - *注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块*\n\n### 定义模块\n\n```javascript\n// 第一个参数为模块名，第二个参数为当前这个模块所依赖的模块列表\nangular.module('ModuleName', []);\n```\n\n### 获取已经定义过的模块\n\n```javascript\nvar existModule = angular.module('ExistModule');\n```\n\n### 如何划分模块\n\n#### 1.根据当前需要开发的应用程序的组成划分需要多少模块，\n\n比如：\n- 注册模块\n- 登录模块\n- 用户列表页模块\n- 用户详细页模块\n- etc.\n\n#### 2. 根据文件类型的不同来划分\n\n比如：\n- 所有的控制器\n- 所有的服务\n- 所有的指令\n- etc.\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 控制器\n\n> 当下的企业开发，如果使用Angular，主要就是开发对应的控制器和模型\n\n### 定义控制器\n\n定义控制器可以有三种方式，注意第一种已经被淘汰\n\n#### 传统方式（不要再用了）\n\n在最早期的 Angular 代码中可能会见到以全局函数的方式定义的控制器：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>早期的控制器定义方式-全局函数</title>\n</head>\n<body ng-app>\n  <div ng-controller=\"FooController\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nfunction FooController($scope) {\n  $scope.say = function(){\n    console.log('hello angular');\n  };\n}\n```\n\n这种方式现在已经不被支持，就算没有淘汰也不应该使用，太low（全局作用域的问题）\n\n\n#### 常用方式（挂载在某个模块下）（必须掌握）\n\nAngular中最常见的一种使用方式，通过模块中定义的`controller`方法定义控制器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>常用方式（挂载在某个模块下）</title>\n</head>\n<body ng-app=\"MyModule\">\n  <div ng-controller=\"FooController\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nangular.module('MyModule', [])\n  .controller('FooController', function($scope) {\n    $scope.say = function(){\n      console.log('hello angular');\n    };\n  });\n```\n\n\n#### 定义类型的方式（构造函数）\n\n对于喜欢通过定义构造函数的方式编写面向对象代码的同学可以使用构造函数的形式定义一个控制器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>面向对象的方式</title>\n</head>\n<body ng-app=\"MyModule\">\n  <div ng-controller=\"FooController as context\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"context.say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nfunction FooController() {\n  this.message = 'hello angular';\n}\n\nFooController.prototype.say = function() {\n  console.log(this.message);\n};\n\nangular.module('MyModule', [])\n  .controller('FooController', FooController);\n```\n\n\n### 注意事项\n\n- 在以上的使用方式中，如果需要为控制器函数注入类似`$scope`之类的参数，必须确保参数名为一个特定值\n- 也就是说Angular会根据参数名称自动注入对应的对象（与参数个数，出现顺序无关），所以参数名一定不能写错\n- 但是，我们对于写完的JS代码经常会在上线之前对代码进行压缩\n- 压缩的过程中如果启用混淆压缩的话，就会造成参数名变化\n- 一旦变化了参数名，NG就无法为其注入对应的对象了\n- `所以，最安全的写法就是不要依赖参数名（依赖不会变化的东西）：`\n\n```javascript\nangular.module('MyModule', [])\n  .controller('FooController', ['$scope', function(whatever) {\n    whatever.say = function(){\n      console.log('hello angular');\n    };\n  }]);\n```\n\n解决方式就是将创建控制器的第二个参数改为一个数组，数组的最后一个成员就是以前的控制器函数，前面的成员就是控制器函数需要注入的对象列表，按照顺序对应\n\n\n#### 扩展小知识：实现原理\n\n如何根据参数名传入特定对象？\n\n```javascript\nfunction getFnParams(fn) {\n  if (typeof fn == 'function') {\n    var mathes = /.+\\((.+)\\)/.exec(Function.prototype.toString.call(fn));\n    if (mathes[1]) {\n      var args = mathes[1].replace(/\\s/g, '').split(',');\n      return args;\n    }\n  }\n}\n\nfunction foo(id, name, a1ge) {}\n\nconsole.log(getFnParams(foo));\n```\n\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## $scope\n\n- 视图和控制器之间的数据桥梁\n- 用于在视图和控制器之间传递数据\n- 用来暴露数据模型（数据，行为）\n\n![$scope](http://files.wedn.net/2016/03/scope-1458840236999.png)\n\n### ViewModel\n\n- $scope 实际上就是MVVM中所谓的VM（视图模型）\n- 正是因为$scope在Angular中大量使用甚至盖过了C（控制器）的概念，所以很多人（包括我）把Angular称之为MVVM框架\n- 这一点倒是无所谓，具体看怎么用罢了\n\n大家必须掌握的就是如何根据一个原型抽象出对应的视图模型\n\n![抽象ViewModel](http://files.wedn.net/2016/03/view-model-1458840241292.png)\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 表达式\n\n类似于模版引擎的语法\n\n### 作用：\n\n使用表达式把数据绑定到 HTML。\n\n### 语法：\n\n- 表达式写在双大括号内：{{ expression }}。\n- AngularJS 表达式很像 JavaScript 表达式\n- 它们可以包含文字、运算符和变量\n- 如 {{ 5 + 5 }} 或 {{ firstName + '-' + lastName }}\n\n### 支持的类型\n\n- 数字  {{ 100 + 100 }}\n- 字符串 {{ 'hello' + 'angular' }}\n- 对象  {{ zhangsan.name }}\n- 数组  {{ students[10] }}\n\n\n### 与JS的比较：\n\n相同点：\n- AngularJS 表达式可以包含字母，操作符，变量。\n\n不同点：\n- AngularJS 表达式可以写在 HTML 中。\n- AngularJS 表达式不支持条件判断，循环及异常。\n- AngularJS 表达式支持过滤器。\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 指令\n\n- 在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等\n- 简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作\n\n### 指令标准属性的问题\n\n- ng-xxx 的属性本身并不是标准中定义的属性\n- 很多情况下语法校验是无法通过的\n- HTML5 允许扩展的（自制的）属性，以 data- 开头。\n- 在 AngularJS 中可以使用 data-ng- 来让网页对 HTML5 有效。\n- 二者效果相同。\n\n\n### 内置指令\n\n\n#### ng-app\n\n- ng-app 指令用来标明一个 AngularJS 应用程序\n- 标记在一个 AngularJS 的作用范围的根对象上\n- 系统执行时会自动的执行根对象范围内的其他指令\n- 可以在同一个页面创建多个 ng-app 节点（不推荐）\n- 创建多个ng-app时，默认只能执行第一个，后面的需要手动引导：angular.bootstrap()\n- 标记的范围尽可能小，性能\n\n\n#### ng-model\n\n- 用于建立界面上的元素到数据模型属性的双向数据绑定\n- 一般情况绑定到元素的value属性上\n- 但是在checkbox之类的表单元素会有不同\n\n\n#### ng-bind\n\n\n#### ng-bind-html\n\n\n#### ng-repeat\n\n\n#### ng-class\n\n\n#### ng-cloak\n\n\n#### ng-show/ng-hide/ng-if\n\n\n#### ng-src\n\n\n#### ng-switch\n\n\n#### 其他常用指令\n\n- ng-checked：\n  + 单选/复选是否选中，只是单向绑定数据\n- ng-selected：\n  + 是否选中，只是单向绑定数据\n- ng-disabled：\n  + 是否禁用\n- ng-readonly：\n  + 是否只读\n\n### 常用事件指令\n\n不同于以上的功能性指令，Angular还定义了一些用于和事件绑定的指令：\n\n- ng-blur：\n  + 失去焦点\n- ng-change：\n  + 发生改变\n- ng-copy：\n  + 拷贝完成\n- ng-click：\n  + 单击\n- ng-dblclick：\n  + 双击\n- ng-focus：\n  + 得到焦点\n- ng-blur：\n  + 失去焦点\n- ng-submit：\n  + 表单提交\n\n\n\n### 自定义指令\n\n- 指令无外乎增强了 HTML，提供额外的功能\n- 以上的指令基本上已经可以满足我们的绝大多数需要了\n- 少数情况下我们有一些特殊的需要，可以通过自定义指令的方式实现：\n\n#### 组件式指令Demo\n\n```javascript\nmyModule.directive('hello', function() {\n  return {\n    restrict: 'E',\n    template: '<h1>Hello world</h1>',\n    replace: true\n  };\n});\n```\n\n#### 功能型指令Demo\n\n```javascript\nmyApp.directive(\"ngHover\", function() {\n  return function(scope, element, attrs) {\n    element.bind(\"mouseenter\", function() {\n      element.css(\"background\", \"yellow\");\n    });\n    element.bind(\"mouseleave\", function() {\n      element.css(\"background\", \"none\");\n    });\n  }\n});\n```\n\n#### 自定义指令的类型\n\n1. E：Element（元素）\n2. A：Attribute（属性）\n3. C：Class（类名）\n4. M：Comment（注释）\n\n#### 注意：\n\n在定义指令应该使用驼峰命名法，使用指令时应该使用的是全小写字母中划线分割的方式\n","source":"_posts/angular-essential.md","raw":"---\ntitle: Angular 基础入门\ndate: 2016-05-02 16:22:14\ntags:\n  Angular\n---\n## 简介\n\n### 什么是AngularJS\n\n- 一个功能非常完备的前端框架，通过增强HTML的方式提供一种便捷开发Web应用程序的方式\n- 其核心特点就是几乎无任何DOM操作，让开发人员的精力和时间全部集中于业务\n- MVC的特性增强了代码的结构和可维护性，应对需求的变化做出最小的改动\n\n\n### 为什么使用AngularJS\n\n- 更少的代码实现更强劲的功能\n- 提供了很多在传统后端开发中大量使用的思想和方式，提高前台代码的结构和可维护性\n\n\n### 使用AnuglarJS的流程\n\n1. 在HTML中引入Angular.js文件\n2. 在自己的代码中定义一个AngularJS的模块\n3. 将模块作用到HTML中的某个节点\n4. 根据模块的功能定义控制器\n5. 根据当前页面原型设计$scope的结构\n6. 通过$scope暴露数据和行为\n7. 将暴露出来的数据和行为通过特定的指令绑定到HTML节点中\n\n\n### MVC\n\n- 一种应用程序的设计思想，其目的是为了对应用程序的组成进行划分，让结构更加清晰可维护性更高，确保每个原件都有明确的单一职责\n\n![MVC](http://files.wedn.net/2016/03/mvc-1458840221606.png)\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 模块\n\n> - 可以通过`angular.module()`方法操作模块\n> - *注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块*\n\n### 定义模块\n\n```javascript\n// 第一个参数为模块名，第二个参数为当前这个模块所依赖的模块列表\nangular.module('ModuleName', []);\n```\n\n### 获取已经定义过的模块\n\n```javascript\nvar existModule = angular.module('ExistModule');\n```\n\n### 如何划分模块\n\n#### 1.根据当前需要开发的应用程序的组成划分需要多少模块，\n\n比如：\n- 注册模块\n- 登录模块\n- 用户列表页模块\n- 用户详细页模块\n- etc.\n\n#### 2. 根据文件类型的不同来划分\n\n比如：\n- 所有的控制器\n- 所有的服务\n- 所有的指令\n- etc.\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 控制器\n\n> 当下的企业开发，如果使用Angular，主要就是开发对应的控制器和模型\n\n### 定义控制器\n\n定义控制器可以有三种方式，注意第一种已经被淘汰\n\n#### 传统方式（不要再用了）\n\n在最早期的 Angular 代码中可能会见到以全局函数的方式定义的控制器：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>早期的控制器定义方式-全局函数</title>\n</head>\n<body ng-app>\n  <div ng-controller=\"FooController\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nfunction FooController($scope) {\n  $scope.say = function(){\n    console.log('hello angular');\n  };\n}\n```\n\n这种方式现在已经不被支持，就算没有淘汰也不应该使用，太low（全局作用域的问题）\n\n\n#### 常用方式（挂载在某个模块下）（必须掌握）\n\nAngular中最常见的一种使用方式，通过模块中定义的`controller`方法定义控制器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>常用方式（挂载在某个模块下）</title>\n</head>\n<body ng-app=\"MyModule\">\n  <div ng-controller=\"FooController\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nangular.module('MyModule', [])\n  .controller('FooController', function($scope) {\n    $scope.say = function(){\n      console.log('hello angular');\n    };\n  });\n```\n\n\n#### 定义类型的方式（构造函数）\n\n对于喜欢通过定义构造函数的方式编写面向对象代码的同学可以使用构造函数的形式定义一个控制器\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>面向对象的方式</title>\n</head>\n<body ng-app=\"MyModule\">\n  <div ng-controller=\"FooController as context\">\n    <input type=\"button\" value=\"clicked me!\" ng-click=\"context.say()\">\n  </div>\n</body>\n</html>\n```\n\n```javascript\nfunction FooController() {\n  this.message = 'hello angular';\n}\n\nFooController.prototype.say = function() {\n  console.log(this.message);\n};\n\nangular.module('MyModule', [])\n  .controller('FooController', FooController);\n```\n\n\n### 注意事项\n\n- 在以上的使用方式中，如果需要为控制器函数注入类似`$scope`之类的参数，必须确保参数名为一个特定值\n- 也就是说Angular会根据参数名称自动注入对应的对象（与参数个数，出现顺序无关），所以参数名一定不能写错\n- 但是，我们对于写完的JS代码经常会在上线之前对代码进行压缩\n- 压缩的过程中如果启用混淆压缩的话，就会造成参数名变化\n- 一旦变化了参数名，NG就无法为其注入对应的对象了\n- `所以，最安全的写法就是不要依赖参数名（依赖不会变化的东西）：`\n\n```javascript\nangular.module('MyModule', [])\n  .controller('FooController', ['$scope', function(whatever) {\n    whatever.say = function(){\n      console.log('hello angular');\n    };\n  }]);\n```\n\n解决方式就是将创建控制器的第二个参数改为一个数组，数组的最后一个成员就是以前的控制器函数，前面的成员就是控制器函数需要注入的对象列表，按照顺序对应\n\n\n#### 扩展小知识：实现原理\n\n如何根据参数名传入特定对象？\n\n```javascript\nfunction getFnParams(fn) {\n  if (typeof fn == 'function') {\n    var mathes = /.+\\((.+)\\)/.exec(Function.prototype.toString.call(fn));\n    if (mathes[1]) {\n      var args = mathes[1].replace(/\\s/g, '').split(',');\n      return args;\n    }\n  }\n}\n\nfunction foo(id, name, a1ge) {}\n\nconsole.log(getFnParams(foo));\n```\n\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## $scope\n\n- 视图和控制器之间的数据桥梁\n- 用于在视图和控制器之间传递数据\n- 用来暴露数据模型（数据，行为）\n\n![$scope](http://files.wedn.net/2016/03/scope-1458840236999.png)\n\n### ViewModel\n\n- $scope 实际上就是MVVM中所谓的VM（视图模型）\n- 正是因为$scope在Angular中大量使用甚至盖过了C（控制器）的概念，所以很多人（包括我）把Angular称之为MVVM框架\n- 这一点倒是无所谓，具体看怎么用罢了\n\n大家必须掌握的就是如何根据一个原型抽象出对应的视图模型\n\n![抽象ViewModel](http://files.wedn.net/2016/03/view-model-1458840241292.png)\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 表达式\n\n类似于模版引擎的语法\n\n### 作用：\n\n使用表达式把数据绑定到 HTML。\n\n### 语法：\n\n- 表达式写在双大括号内：{{ expression }}。\n- AngularJS 表达式很像 JavaScript 表达式\n- 它们可以包含文字、运算符和变量\n- 如 {{ 5 + 5 }} 或 {{ firstName + '-' + lastName }}\n\n### 支持的类型\n\n- 数字  {{ 100 + 100 }}\n- 字符串 {{ 'hello' + 'angular' }}\n- 对象  {{ zhangsan.name }}\n- 数组  {{ students[10] }}\n\n\n### 与JS的比较：\n\n相同点：\n- AngularJS 表达式可以包含字母，操作符，变量。\n\n不同点：\n- AngularJS 表达式可以写在 HTML 中。\n- AngularJS 表达式不支持条件判断，循环及异常。\n- AngularJS 表达式支持过滤器。\n\n\n\n\n<!-- ======================================================================= -->\n*****\n\n## 指令\n\n- 在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等\n- 简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作\n\n### 指令标准属性的问题\n\n- ng-xxx 的属性本身并不是标准中定义的属性\n- 很多情况下语法校验是无法通过的\n- HTML5 允许扩展的（自制的）属性，以 data- 开头。\n- 在 AngularJS 中可以使用 data-ng- 来让网页对 HTML5 有效。\n- 二者效果相同。\n\n\n### 内置指令\n\n\n#### ng-app\n\n- ng-app 指令用来标明一个 AngularJS 应用程序\n- 标记在一个 AngularJS 的作用范围的根对象上\n- 系统执行时会自动的执行根对象范围内的其他指令\n- 可以在同一个页面创建多个 ng-app 节点（不推荐）\n- 创建多个ng-app时，默认只能执行第一个，后面的需要手动引导：angular.bootstrap()\n- 标记的范围尽可能小，性能\n\n\n#### ng-model\n\n- 用于建立界面上的元素到数据模型属性的双向数据绑定\n- 一般情况绑定到元素的value属性上\n- 但是在checkbox之类的表单元素会有不同\n\n\n#### ng-bind\n\n\n#### ng-bind-html\n\n\n#### ng-repeat\n\n\n#### ng-class\n\n\n#### ng-cloak\n\n\n#### ng-show/ng-hide/ng-if\n\n\n#### ng-src\n\n\n#### ng-switch\n\n\n#### 其他常用指令\n\n- ng-checked：\n  + 单选/复选是否选中，只是单向绑定数据\n- ng-selected：\n  + 是否选中，只是单向绑定数据\n- ng-disabled：\n  + 是否禁用\n- ng-readonly：\n  + 是否只读\n\n### 常用事件指令\n\n不同于以上的功能性指令，Angular还定义了一些用于和事件绑定的指令：\n\n- ng-blur：\n  + 失去焦点\n- ng-change：\n  + 发生改变\n- ng-copy：\n  + 拷贝完成\n- ng-click：\n  + 单击\n- ng-dblclick：\n  + 双击\n- ng-focus：\n  + 得到焦点\n- ng-blur：\n  + 失去焦点\n- ng-submit：\n  + 表单提交\n\n\n\n### 自定义指令\n\n- 指令无外乎增强了 HTML，提供额外的功能\n- 以上的指令基本上已经可以满足我们的绝大多数需要了\n- 少数情况下我们有一些特殊的需要，可以通过自定义指令的方式实现：\n\n#### 组件式指令Demo\n\n```javascript\nmyModule.directive('hello', function() {\n  return {\n    restrict: 'E',\n    template: '<h1>Hello world</h1>',\n    replace: true\n  };\n});\n```\n\n#### 功能型指令Demo\n\n```javascript\nmyApp.directive(\"ngHover\", function() {\n  return function(scope, element, attrs) {\n    element.bind(\"mouseenter\", function() {\n      element.css(\"background\", \"yellow\");\n    });\n    element.bind(\"mouseleave\", function() {\n      element.css(\"background\", \"none\");\n    });\n  }\n});\n```\n\n#### 自定义指令的类型\n\n1. E：Element（元素）\n2. A：Attribute（属性）\n3. C：Class（类名）\n4. M：Comment（注释）\n\n#### 注意：\n\n在定义指令应该使用驼峰命名法，使用指令时应该使用的是全小写字母中划线分割的方式\n","slug":"angular-essential","published":1,"updated":"2016-05-02T08:28:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyuu0000u5i132hn2u0q","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"什么是AngularJS\"><a href=\"#什么是AngularJS\" class=\"headerlink\" title=\"什么是AngularJS\"></a>什么是AngularJS</h3><ul>\n<li>一个功能非常完备的前端框架，通过增强HTML的方式提供一种便捷开发Web应用程序的方式</li>\n<li>其核心特点就是几乎无任何DOM操作，让开发人员的精力和时间全部集中于业务</li>\n<li>MVC的特性增强了代码的结构和可维护性，应对需求的变化做出最小的改动</li>\n</ul>\n<h3 id=\"为什么使用AngularJS\"><a href=\"#为什么使用AngularJS\" class=\"headerlink\" title=\"为什么使用AngularJS\"></a>为什么使用AngularJS</h3><ul>\n<li>更少的代码实现更强劲的功能</li>\n<li>提供了很多在传统后端开发中大量使用的思想和方式，提高前台代码的结构和可维护性</li>\n</ul>\n<h3 id=\"使用AnuglarJS的流程\"><a href=\"#使用AnuglarJS的流程\" class=\"headerlink\" title=\"使用AnuglarJS的流程\"></a>使用AnuglarJS的流程</h3><ol>\n<li>在HTML中引入Angular.js文件</li>\n<li>在自己的代码中定义一个AngularJS的模块</li>\n<li>将模块作用到HTML中的某个节点</li>\n<li>根据模块的功能定义控制器</li>\n<li>根据当前页面原型设计$scope的结构</li>\n<li>通过$scope暴露数据和行为</li>\n<li>将暴露出来的数据和行为通过特定的指令绑定到HTML节点中</li>\n</ol>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><ul>\n<li>一种应用程序的设计思想，其目的是为了对应用程序的组成进行划分，让结构更加清晰可维护性更高，确保每个原件都有明确的单一职责</li>\n</ul>\n<p><img src=\"http://files.wedn.net/2016/03/mvc-1458840221606.png\" alt=\"MVC\"></p>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><blockquote>\n<ul>\n<li>可以通过<code>angular.module()</code>方法操作模块</li>\n<li><em>注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块</em></li>\n</ul>\n</blockquote>\n<h3 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数为模块名，第二个参数为当前这个模块所依赖的模块列表</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'ModuleName'</span>, []);</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取已经定义过的模块\"><a href=\"#获取已经定义过的模块\" class=\"headerlink\" title=\"获取已经定义过的模块\"></a>获取已经定义过的模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> existModule = angular.module(<span class=\"string\">'ExistModule'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何划分模块\"><a href=\"#如何划分模块\" class=\"headerlink\" title=\"如何划分模块\"></a>如何划分模块</h3><h4 id=\"1-根据当前需要开发的应用程序的组成划分需要多少模块，\"><a href=\"#1-根据当前需要开发的应用程序的组成划分需要多少模块，\" class=\"headerlink\" title=\"1.根据当前需要开发的应用程序的组成划分需要多少模块，\"></a>1.根据当前需要开发的应用程序的组成划分需要多少模块，</h4><p>比如：</p>\n<ul>\n<li>注册模块</li>\n<li>登录模块</li>\n<li>用户列表页模块</li>\n<li>用户详细页模块</li>\n<li>etc.</li>\n</ul>\n<h4 id=\"2-根据文件类型的不同来划分\"><a href=\"#2-根据文件类型的不同来划分\" class=\"headerlink\" title=\"2. 根据文件类型的不同来划分\"></a>2. 根据文件类型的不同来划分</h4><p>比如：</p>\n<ul>\n<li>所有的控制器</li>\n<li>所有的服务</li>\n<li>所有的指令</li>\n<li>etc.</li>\n</ul>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><blockquote>\n<p>当下的企业开发，如果使用Angular，主要就是开发对应的控制器和模型</p>\n</blockquote>\n<h3 id=\"定义控制器\"><a href=\"#定义控制器\" class=\"headerlink\" title=\"定义控制器\"></a>定义控制器</h3><p>定义控制器可以有三种方式，注意第一种已经被淘汰</p>\n<h4 id=\"传统方式（不要再用了）\"><a href=\"#传统方式（不要再用了）\" class=\"headerlink\" title=\"传统方式（不要再用了）\"></a>传统方式（不要再用了）</h4><p>在最早期的 Angular 代码中可能会见到以全局函数的方式定义的控制器：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>早期的控制器定义方式-全局函数<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FooController</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式现在已经不被支持，就算没有淘汰也不应该使用，太low（全局作用域的问题）</p>\n<h4 id=\"常用方式（挂载在某个模块下）（必须掌握）\"><a href=\"#常用方式（挂载在某个模块下）（必须掌握）\" class=\"headerlink\" title=\"常用方式（挂载在某个模块下）（必须掌握）\"></a>常用方式（挂载在某个模块下）（必须掌握）</h4><p>Angular中最常见的一种使用方式，通过模块中定义的<code>controller</code>方法定义控制器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用方式（挂载在某个模块下）<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"MyModule\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">    $scope.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"定义类型的方式（构造函数）\"><a href=\"#定义类型的方式（构造函数）\" class=\"headerlink\" title=\"定义类型的方式（构造函数）\"></a>定义类型的方式（构造函数）</h4><p>对于喜欢通过定义构造函数的方式编写面向对象代码的同学可以使用构造函数的形式定义一个控制器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>面向对象的方式<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"MyModule\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController as context\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"context.say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FooController</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">'hello angular'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FooController.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, FooController);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在以上的使用方式中，如果需要为控制器函数注入类似<code>$scope</code>之类的参数，必须确保参数名为一个特定值</li>\n<li>也就是说Angular会根据参数名称自动注入对应的对象（与参数个数，出现顺序无关），所以参数名一定不能写错</li>\n<li>但是，我们对于写完的JS代码经常会在上线之前对代码进行压缩</li>\n<li>压缩的过程中如果启用混淆压缩的话，就会造成参数名变化</li>\n<li>一旦变化了参数名，NG就无法为其注入对应的对象了</li>\n<li><code>所以，最安全的写法就是不要依赖参数名（依赖不会变化的东西）：</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">whatever</span>) </span>&#123;</span><br><span class=\"line\">    whatever.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;]);</span><br></pre></td></tr></table></figure>\n<p>解决方式就是将创建控制器的第二个参数改为一个数组，数组的最后一个成员就是以前的控制器函数，前面的成员就是控制器函数需要注入的对象列表，按照顺序对应</p>\n<h4 id=\"扩展小知识：实现原理\"><a href=\"#扩展小知识：实现原理\" class=\"headerlink\" title=\"扩展小知识：实现原理\"></a>扩展小知识：实现原理</h4><p>如何根据参数名传入特定对象？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFnParams</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mathes = <span class=\"regexp\">/.+\\((.+)\\)/</span>.exec(<span class=\"built_in\">Function</span>.prototype.toString.call(fn));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mathes[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = mathes[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).split(<span class=\"string\">','</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">id, name, a1ge</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getFnParams(foo));</span><br></pre></td></tr></table></figure>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"$scope\"></a>$scope</h2><ul>\n<li>视图和控制器之间的数据桥梁</li>\n<li>用于在视图和控制器之间传递数据</li>\n<li>用来暴露数据模型（数据，行为）</li>\n</ul>\n<p><img src=\"http://files.wedn.net/2016/03/scope-1458840236999.png\" alt=\"$scope\"></p>\n<h3 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h3><ul>\n<li>$scope 实际上就是MVVM中所谓的VM（视图模型）</li>\n<li>正是因为$scope在Angular中大量使用甚至盖过了C（控制器）的概念，所以很多人（包括我）把Angular称之为MVVM框架</li>\n<li>这一点倒是无所谓，具体看怎么用罢了</li>\n</ul>\n<p>大家必须掌握的就是如何根据一个原型抽象出对应的视图模型</p>\n<p><img src=\"http://files.wedn.net/2016/03/view-model-1458840241292.png\" alt=\"抽象ViewModel\"></p>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>类似于模版引擎的语法</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p>使用表达式把数据绑定到 HTML。</p>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><ul>\n<li>表达式写在双大括号内：。</li>\n<li>AngularJS 表达式很像 JavaScript 表达式</li>\n<li>它们可以包含文字、运算符和变量</li>\n<li>如 10 或 undefined-undefined</li>\n</ul>\n<h3 id=\"支持的类型\"><a href=\"#支持的类型\" class=\"headerlink\" title=\"支持的类型\"></a>支持的类型</h3><ul>\n<li>数字  200</li>\n<li>字符串 helloangular</li>\n<li>对象  </li>\n<li>数组  </li>\n</ul>\n<h3 id=\"与JS的比较：\"><a href=\"#与JS的比较：\" class=\"headerlink\" title=\"与JS的比较：\"></a>与JS的比较：</h3><p>相同点：</p>\n<ul>\n<li>AngularJS 表达式可以包含字母，操作符，变量。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>AngularJS 表达式可以写在 HTML 中。</li>\n<li>AngularJS 表达式不支持条件判断，循环及异常。</li>\n<li>AngularJS 表达式支持过滤器。</li>\n</ul>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><ul>\n<li>在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等</li>\n<li>简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作</li>\n</ul>\n<h3 id=\"指令标准属性的问题\"><a href=\"#指令标准属性的问题\" class=\"headerlink\" title=\"指令标准属性的问题\"></a>指令标准属性的问题</h3><ul>\n<li>ng-xxx 的属性本身并不是标准中定义的属性</li>\n<li>很多情况下语法校验是无法通过的</li>\n<li>HTML5 允许扩展的（自制的）属性，以 data- 开头。</li>\n<li>在 AngularJS 中可以使用 data-ng- 来让网页对 HTML5 有效。</li>\n<li>二者效果相同。</li>\n</ul>\n<h3 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h3><h4 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a>ng-app</h4><ul>\n<li>ng-app 指令用来标明一个 AngularJS 应用程序</li>\n<li>标记在一个 AngularJS 的作用范围的根对象上</li>\n<li>系统执行时会自动的执行根对象范围内的其他指令</li>\n<li>可以在同一个页面创建多个 ng-app 节点（不推荐）</li>\n<li>创建多个ng-app时，默认只能执行第一个，后面的需要手动引导：angular.bootstrap()</li>\n<li>标记的范围尽可能小，性能</li>\n</ul>\n<h4 id=\"ng-model\"><a href=\"#ng-model\" class=\"headerlink\" title=\"ng-model\"></a>ng-model</h4><ul>\n<li>用于建立界面上的元素到数据模型属性的双向数据绑定</li>\n<li>一般情况绑定到元素的value属性上</li>\n<li>但是在checkbox之类的表单元素会有不同</li>\n</ul>\n<h4 id=\"ng-bind\"><a href=\"#ng-bind\" class=\"headerlink\" title=\"ng-bind\"></a>ng-bind</h4><h4 id=\"ng-bind-html\"><a href=\"#ng-bind-html\" class=\"headerlink\" title=\"ng-bind-html\"></a>ng-bind-html</h4><h4 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h4><h4 id=\"ng-class\"><a href=\"#ng-class\" class=\"headerlink\" title=\"ng-class\"></a>ng-class</h4><h4 id=\"ng-cloak\"><a href=\"#ng-cloak\" class=\"headerlink\" title=\"ng-cloak\"></a>ng-cloak</h4><h4 id=\"ng-show-ng-hide-ng-if\"><a href=\"#ng-show-ng-hide-ng-if\" class=\"headerlink\" title=\"ng-show/ng-hide/ng-if\"></a>ng-show/ng-hide/ng-if</h4><h4 id=\"ng-src\"><a href=\"#ng-src\" class=\"headerlink\" title=\"ng-src\"></a>ng-src</h4><h4 id=\"ng-switch\"><a href=\"#ng-switch\" class=\"headerlink\" title=\"ng-switch\"></a>ng-switch</h4><h4 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h4><ul>\n<li>ng-checked：<ul>\n<li>单选/复选是否选中，只是单向绑定数据</li>\n</ul>\n</li>\n<li>ng-selected：<ul>\n<li>是否选中，只是单向绑定数据</li>\n</ul>\n</li>\n<li>ng-disabled：<ul>\n<li>是否禁用</li>\n</ul>\n</li>\n<li>ng-readonly：<ul>\n<li>是否只读</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用事件指令\"><a href=\"#常用事件指令\" class=\"headerlink\" title=\"常用事件指令\"></a>常用事件指令</h3><p>不同于以上的功能性指令，Angular还定义了一些用于和事件绑定的指令：</p>\n<ul>\n<li>ng-blur：<ul>\n<li>失去焦点</li>\n</ul>\n</li>\n<li>ng-change：<ul>\n<li>发生改变</li>\n</ul>\n</li>\n<li>ng-copy：<ul>\n<li>拷贝完成</li>\n</ul>\n</li>\n<li>ng-click：<ul>\n<li>单击</li>\n</ul>\n</li>\n<li>ng-dblclick：<ul>\n<li>双击</li>\n</ul>\n</li>\n<li>ng-focus：<ul>\n<li>得到焦点</li>\n</ul>\n</li>\n<li>ng-blur：<ul>\n<li>失去焦点</li>\n</ul>\n</li>\n<li>ng-submit：<ul>\n<li>表单提交</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><ul>\n<li>指令无外乎增强了 HTML，提供额外的功能</li>\n<li>以上的指令基本上已经可以满足我们的绝大多数需要了</li>\n<li>少数情况下我们有一些特殊的需要，可以通过自定义指令的方式实现：</li>\n</ul>\n<h4 id=\"组件式指令Demo\"><a href=\"#组件式指令Demo\" class=\"headerlink\" title=\"组件式指令Demo\"></a>组件式指令Demo</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule.directive(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'E'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;Hello world&lt;/h1&gt;'</span>,</span><br><span class=\"line\">    replace: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"功能型指令Demo\"><a href=\"#功能型指令Demo\" class=\"headerlink\" title=\"功能型指令Demo\"></a>功能型指令Demo</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">\"ngHover\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">    element.bind(<span class=\"string\">\"mouseenter\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      element.css(<span class=\"string\">\"background\"</span>, <span class=\"string\">\"yellow\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    element.bind(<span class=\"string\">\"mouseleave\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      element.css(<span class=\"string\">\"background\"</span>, <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义指令的类型\"><a href=\"#自定义指令的类型\" class=\"headerlink\" title=\"自定义指令的类型\"></a>自定义指令的类型</h4><ol>\n<li>E：Element（元素）</li>\n<li>A：Attribute（属性）</li>\n<li>C：Class（类名）</li>\n<li>M：Comment（注释）</li>\n</ol>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>在定义指令应该使用驼峰命名法，使用指令时应该使用的是全小写字母中划线分割的方式</p>\n","excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><h3 id=\"什么是AngularJS\"><a href=\"#什么是AngularJS\" class=\"headerlink\" title=\"什么是AngularJS\"></a>什么是AngularJS</h3><ul>\n<li>一个功能非常完备的前端框架，通过增强HTML的方式提供一种便捷开发Web应用程序的方式</li>\n<li>其核心特点就是几乎无任何DOM操作，让开发人员的精力和时间全部集中于业务</li>\n<li>MVC的特性增强了代码的结构和可维护性，应对需求的变化做出最小的改动</li>\n</ul>\n<h3 id=\"为什么使用AngularJS\"><a href=\"#为什么使用AngularJS\" class=\"headerlink\" title=\"为什么使用AngularJS\"></a>为什么使用AngularJS</h3><ul>\n<li>更少的代码实现更强劲的功能</li>\n<li>提供了很多在传统后端开发中大量使用的思想和方式，提高前台代码的结构和可维护性</li>\n</ul>\n<h3 id=\"使用AnuglarJS的流程\"><a href=\"#使用AnuglarJS的流程\" class=\"headerlink\" title=\"使用AnuglarJS的流程\"></a>使用AnuglarJS的流程</h3><ol>\n<li>在HTML中引入Angular.js文件</li>\n<li>在自己的代码中定义一个AngularJS的模块</li>\n<li>将模块作用到HTML中的某个节点</li>\n<li>根据模块的功能定义控制器</li>\n<li>根据当前页面原型设计$scope的结构</li>\n<li>通过$scope暴露数据和行为</li>\n<li>将暴露出来的数据和行为通过特定的指令绑定到HTML节点中</li>\n</ol>\n<h3 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h3><ul>\n<li>一种应用程序的设计思想，其目的是为了对应用程序的组成进行划分，让结构更加清晰可维护性更高，确保每个原件都有明确的单一职责</li>\n</ul>\n<p><img src=\"http://files.wedn.net/2016/03/mvc-1458840221606.png\" alt=\"MVC\"></p>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"模块\"><a href=\"#模块\" class=\"headerlink\" title=\"模块\"></a>模块</h2><blockquote>\n<ul>\n<li>可以通过<code>angular.module()</code>方法操作模块</li>\n<li><em>注意：该方法只有在传入两个参数时才会创建模块，否则为获取已有模块</em></li>\n</ul>\n</blockquote>\n<h3 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一个参数为模块名，第二个参数为当前这个模块所依赖的模块列表</span></span><br><span class=\"line\">angular.module(<span class=\"string\">'ModuleName'</span>, []);</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取已经定义过的模块\"><a href=\"#获取已经定义过的模块\" class=\"headerlink\" title=\"获取已经定义过的模块\"></a>获取已经定义过的模块</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> existModule = angular.module(<span class=\"string\">'ExistModule'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如何划分模块\"><a href=\"#如何划分模块\" class=\"headerlink\" title=\"如何划分模块\"></a>如何划分模块</h3><h4 id=\"1-根据当前需要开发的应用程序的组成划分需要多少模块，\"><a href=\"#1-根据当前需要开发的应用程序的组成划分需要多少模块，\" class=\"headerlink\" title=\"1.根据当前需要开发的应用程序的组成划分需要多少模块，\"></a>1.根据当前需要开发的应用程序的组成划分需要多少模块，</h4><p>比如：</p>\n<ul>\n<li>注册模块</li>\n<li>登录模块</li>\n<li>用户列表页模块</li>\n<li>用户详细页模块</li>\n<li>etc.</li>\n</ul>\n<h4 id=\"2-根据文件类型的不同来划分\"><a href=\"#2-根据文件类型的不同来划分\" class=\"headerlink\" title=\"2. 根据文件类型的不同来划分\"></a>2. 根据文件类型的不同来划分</h4><p>比如：</p>\n<ul>\n<li>所有的控制器</li>\n<li>所有的服务</li>\n<li>所有的指令</li>\n<li>etc.</li>\n</ul>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h2><blockquote>\n<p>当下的企业开发，如果使用Angular，主要就是开发对应的控制器和模型</p>\n</blockquote>\n<h3 id=\"定义控制器\"><a href=\"#定义控制器\" class=\"headerlink\" title=\"定义控制器\"></a>定义控制器</h3><p>定义控制器可以有三种方式，注意第一种已经被淘汰</p>\n<h4 id=\"传统方式（不要再用了）\"><a href=\"#传统方式（不要再用了）\" class=\"headerlink\" title=\"传统方式（不要再用了）\"></a>传统方式（不要再用了）</h4><p>在最早期的 Angular 代码中可能会见到以全局函数的方式定义的控制器：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>早期的控制器定义方式-全局函数<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FooController</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">  $scope.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式现在已经不被支持，就算没有淘汰也不应该使用，太low（全局作用域的问题）</p>\n<h4 id=\"常用方式（挂载在某个模块下）（必须掌握）\"><a href=\"#常用方式（挂载在某个模块下）（必须掌握）\" class=\"headerlink\" title=\"常用方式（挂载在某个模块下）（必须掌握）\"></a>常用方式（挂载在某个模块下）（必须掌握）</h4><p>Angular中最常见的一种使用方式，通过模块中定义的<code>controller</code>方法定义控制器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>常用方式（挂载在某个模块下）<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"MyModule\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope</span>) </span>&#123;</span><br><span class=\"line\">    $scope.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"定义类型的方式（构造函数）\"><a href=\"#定义类型的方式（构造函数）\" class=\"headerlink\" title=\"定义类型的方式（构造函数）\"></a>定义类型的方式（构造函数）</h4><p>对于喜欢通过定义构造函数的方式编写面向对象代码的同学可以使用构造函数的形式定义一个控制器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>面向对象的方式<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"MyModule\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"FooController as context\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"clicked me!\"</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"context.say()\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">FooController</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.message = <span class=\"string\">'hello angular'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">FooController.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.message);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, FooController);</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>在以上的使用方式中，如果需要为控制器函数注入类似<code>$scope</code>之类的参数，必须确保参数名为一个特定值</li>\n<li>也就是说Angular会根据参数名称自动注入对应的对象（与参数个数，出现顺序无关），所以参数名一定不能写错</li>\n<li>但是，我们对于写完的JS代码经常会在上线之前对代码进行压缩</li>\n<li>压缩的过程中如果启用混淆压缩的话，就会造成参数名变化</li>\n<li>一旦变化了参数名，NG就无法为其注入对应的对象了</li>\n<li><code>所以，最安全的写法就是不要依赖参数名（依赖不会变化的东西）：</code></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'MyModule'</span>, [])</span><br><span class=\"line\">  .controller(<span class=\"string\">'FooController'</span>, [<span class=\"string\">'$scope'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">whatever</span>) </span>&#123;</span><br><span class=\"line\">    whatever.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello angular'</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;]);</span><br></pre></td></tr></table></figure>\n<p>解决方式就是将创建控制器的第二个参数改为一个数组，数组的最后一个成员就是以前的控制器函数，前面的成员就是控制器函数需要注入的对象列表，按照顺序对应</p>\n<h4 id=\"扩展小知识：实现原理\"><a href=\"#扩展小知识：实现原理\" class=\"headerlink\" title=\"扩展小知识：实现原理\"></a>扩展小知识：实现原理</h4><p>如何根据参数名传入特定对象？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getFnParams</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fn == <span class=\"string\">'function'</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> mathes = <span class=\"regexp\">/.+\\((.+)\\)/</span>.exec(<span class=\"built_in\">Function</span>.prototype.toString.call(fn));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mathes[<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = mathes[<span class=\"number\">1</span>].replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>).split(<span class=\"string\">','</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> args;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">id, name, a1ge</span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getFnParams(foo));</span><br></pre></td></tr></table></figure>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"scope\"><a href=\"#scope\" class=\"headerlink\" title=\"$scope\"></a>$scope</h2><ul>\n<li>视图和控制器之间的数据桥梁</li>\n<li>用于在视图和控制器之间传递数据</li>\n<li>用来暴露数据模型（数据，行为）</li>\n</ul>\n<p><img src=\"http://files.wedn.net/2016/03/scope-1458840236999.png\" alt=\"$scope\"></p>\n<h3 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h3><ul>\n<li>$scope 实际上就是MVVM中所谓的VM（视图模型）</li>\n<li>正是因为$scope在Angular中大量使用甚至盖过了C（控制器）的概念，所以很多人（包括我）把Angular称之为MVVM框架</li>\n<li>这一点倒是无所谓，具体看怎么用罢了</li>\n</ul>\n<p>大家必须掌握的就是如何根据一个原型抽象出对应的视图模型</p>\n<p><img src=\"http://files.wedn.net/2016/03/view-model-1458840241292.png\" alt=\"抽象ViewModel\"></p>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><p>类似于模版引擎的语法</p>\n<h3 id=\"作用：\"><a href=\"#作用：\" class=\"headerlink\" title=\"作用：\"></a>作用：</h3><p>使用表达式把数据绑定到 HTML。</p>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><ul>\n<li>表达式写在双大括号内：。</li>\n<li>AngularJS 表达式很像 JavaScript 表达式</li>\n<li>它们可以包含文字、运算符和变量</li>\n<li>如 10 或 undefined-undefined</li>\n</ul>\n<h3 id=\"支持的类型\"><a href=\"#支持的类型\" class=\"headerlink\" title=\"支持的类型\"></a>支持的类型</h3><ul>\n<li>数字  200</li>\n<li>字符串 helloangular</li>\n<li>对象  </li>\n<li>数组  </li>\n</ul>\n<h3 id=\"与JS的比较：\"><a href=\"#与JS的比较：\" class=\"headerlink\" title=\"与JS的比较：\"></a>与JS的比较：</h3><p>相同点：</p>\n<ul>\n<li>AngularJS 表达式可以包含字母，操作符，变量。</li>\n</ul>\n<p>不同点：</p>\n<ul>\n<li>AngularJS 表达式可以写在 HTML 中。</li>\n<li>AngularJS 表达式不支持条件判断，循环及异常。</li>\n<li>AngularJS 表达式支持过滤器。</li>\n</ul>\n<!-- ======================================================================= -->\n<hr>\n<h2 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h2><ul>\n<li>在 AngularJS 中将前缀为 ng- 这种属性称之为指令，其作用就是为 DOM 元素调用方法、定义行为绑定数据等</li>\n<li>简单说：当一个 Angular 应用启动，Angular 就会遍历 DOM 树来解析 HTML，根据指令不同，完成不同操作</li>\n</ul>\n<h3 id=\"指令标准属性的问题\"><a href=\"#指令标准属性的问题\" class=\"headerlink\" title=\"指令标准属性的问题\"></a>指令标准属性的问题</h3><ul>\n<li>ng-xxx 的属性本身并不是标准中定义的属性</li>\n<li>很多情况下语法校验是无法通过的</li>\n<li>HTML5 允许扩展的（自制的）属性，以 data- 开头。</li>\n<li>在 AngularJS 中可以使用 data-ng- 来让网页对 HTML5 有效。</li>\n<li>二者效果相同。</li>\n</ul>\n<h3 id=\"内置指令\"><a href=\"#内置指令\" class=\"headerlink\" title=\"内置指令\"></a>内置指令</h3><h4 id=\"ng-app\"><a href=\"#ng-app\" class=\"headerlink\" title=\"ng-app\"></a>ng-app</h4><ul>\n<li>ng-app 指令用来标明一个 AngularJS 应用程序</li>\n<li>标记在一个 AngularJS 的作用范围的根对象上</li>\n<li>系统执行时会自动的执行根对象范围内的其他指令</li>\n<li>可以在同一个页面创建多个 ng-app 节点（不推荐）</li>\n<li>创建多个ng-app时，默认只能执行第一个，后面的需要手动引导：angular.bootstrap()</li>\n<li>标记的范围尽可能小，性能</li>\n</ul>\n<h4 id=\"ng-model\"><a href=\"#ng-model\" class=\"headerlink\" title=\"ng-model\"></a>ng-model</h4><ul>\n<li>用于建立界面上的元素到数据模型属性的双向数据绑定</li>\n<li>一般情况绑定到元素的value属性上</li>\n<li>但是在checkbox之类的表单元素会有不同</li>\n</ul>\n<h4 id=\"ng-bind\"><a href=\"#ng-bind\" class=\"headerlink\" title=\"ng-bind\"></a>ng-bind</h4><h4 id=\"ng-bind-html\"><a href=\"#ng-bind-html\" class=\"headerlink\" title=\"ng-bind-html\"></a>ng-bind-html</h4><h4 id=\"ng-repeat\"><a href=\"#ng-repeat\" class=\"headerlink\" title=\"ng-repeat\"></a>ng-repeat</h4><h4 id=\"ng-class\"><a href=\"#ng-class\" class=\"headerlink\" title=\"ng-class\"></a>ng-class</h4><h4 id=\"ng-cloak\"><a href=\"#ng-cloak\" class=\"headerlink\" title=\"ng-cloak\"></a>ng-cloak</h4><h4 id=\"ng-show-ng-hide-ng-if\"><a href=\"#ng-show-ng-hide-ng-if\" class=\"headerlink\" title=\"ng-show/ng-hide/ng-if\"></a>ng-show/ng-hide/ng-if</h4><h4 id=\"ng-src\"><a href=\"#ng-src\" class=\"headerlink\" title=\"ng-src\"></a>ng-src</h4><h4 id=\"ng-switch\"><a href=\"#ng-switch\" class=\"headerlink\" title=\"ng-switch\"></a>ng-switch</h4><h4 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h4><ul>\n<li>ng-checked：<ul>\n<li>单选/复选是否选中，只是单向绑定数据</li>\n</ul>\n</li>\n<li>ng-selected：<ul>\n<li>是否选中，只是单向绑定数据</li>\n</ul>\n</li>\n<li>ng-disabled：<ul>\n<li>是否禁用</li>\n</ul>\n</li>\n<li>ng-readonly：<ul>\n<li>是否只读</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常用事件指令\"><a href=\"#常用事件指令\" class=\"headerlink\" title=\"常用事件指令\"></a>常用事件指令</h3><p>不同于以上的功能性指令，Angular还定义了一些用于和事件绑定的指令：</p>\n<ul>\n<li>ng-blur：<ul>\n<li>失去焦点</li>\n</ul>\n</li>\n<li>ng-change：<ul>\n<li>发生改变</li>\n</ul>\n</li>\n<li>ng-copy：<ul>\n<li>拷贝完成</li>\n</ul>\n</li>\n<li>ng-click：<ul>\n<li>单击</li>\n</ul>\n</li>\n<li>ng-dblclick：<ul>\n<li>双击</li>\n</ul>\n</li>\n<li>ng-focus：<ul>\n<li>得到焦点</li>\n</ul>\n</li>\n<li>ng-blur：<ul>\n<li>失去焦点</li>\n</ul>\n</li>\n<li>ng-submit：<ul>\n<li>表单提交</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"自定义指令\"><a href=\"#自定义指令\" class=\"headerlink\" title=\"自定义指令\"></a>自定义指令</h3><ul>\n<li>指令无外乎增强了 HTML，提供额外的功能</li>\n<li>以上的指令基本上已经可以满足我们的绝大多数需要了</li>\n<li>少数情况下我们有一些特殊的需要，可以通过自定义指令的方式实现：</li>\n</ul>\n<h4 id=\"组件式指令Demo\"><a href=\"#组件式指令Demo\" class=\"headerlink\" title=\"组件式指令Demo\"></a>组件式指令Demo</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule.directive(<span class=\"string\">'hello'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'E'</span>,</span><br><span class=\"line\">    template: <span class=\"string\">'&lt;h1&gt;Hello world&lt;/h1&gt;'</span>,</span><br><span class=\"line\">    replace: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"功能型指令Demo\"><a href=\"#功能型指令Demo\" class=\"headerlink\" title=\"功能型指令Demo\"></a>功能型指令Demo</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(<span class=\"string\">\"ngHover\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">    element.bind(<span class=\"string\">\"mouseenter\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      element.css(<span class=\"string\">\"background\"</span>, <span class=\"string\">\"yellow\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    element.bind(<span class=\"string\">\"mouseleave\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      element.css(<span class=\"string\">\"background\"</span>, <span class=\"string\">\"none\"</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"自定义指令的类型\"><a href=\"#自定义指令的类型\" class=\"headerlink\" title=\"自定义指令的类型\"></a>自定义指令的类型</h4><ol>\n<li>E：Element（元素）</li>\n<li>A：Attribute（属性）</li>\n<li>C：Class（类名）</li>\n<li>M：Comment（注释）</li>\n</ol>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>在定义指令应该使用驼峰命名法，使用指令时应该使用的是全小写字母中划线分割的方式</p>\n"},{"title":"Angular实现导航自动切换状态","date":"2016-05-02T08:18:50.000Z","_content":"很多时候我们需要实现导航的自动状态切换，现整理一下一些常见的解决方案：\n\n#### 第一种：\n\n通过 $scope 暴露公共方法实现：\n\n```html\n<ul class=\"nav nav-sidebar\" ng-controller=\"NavController\">\n  <li ng-class=\"{active:isActive('/hot')}\">\n    <a href=\"#/hot\">\n      正在热映<span ng-if=\"isActive('/hot')\" class=\"sr-only\">(current)</span>\n    </a>\n  </li>\n  <li ng-class=\"{active:isActive('/coming-soon')}\">\n    <a href=\"#/coming-soon\">\n      即将上映<span ng-if=\"isActive('/coming-soon')\" class=\"sr-only\">(current)</span>\n    </a>\n  </li>\n</ul>\n```\n\n```javascript\napp.controller(\n  'NavController',\n  [\n    '$scope', '$location',\n    function($scope, $location) {\n      $scope.isActive = function(path) {\n        return $location.path().substr(0, path.length) === path;\n      };\n    }\n  ]\n);\n```\n\n实现思路就是通过视图模型上的isActive方法判断当前访问地址是否为此链接地址，从而决定是否添加active样式\n\n#### 第二种：\n\n定义一个指令封装这个逻辑：\n\n```javascript\nangular.module('app.components.nav', [])\n  .directive('auto', ['$location', function($location) {\n    return {\n      restrict: 'A',\n      link: function($scope, iElm, iAttrs, controller) {\n        var className = iAttrs.auto;\n        var path = iAttrs.href.substring(1);\n        $scope.location = $location;\n        $scope.$watch('location.path()', function(newPath) {\n          if (path === newPath) {\n            iElm.parent().addClass(className);\n          } else {\n            iElm.parent().removeClass(className);\n          }\n        });\n      }\n    };\n  }]);\n```\n\n```html\n<ul class=\"nav nav-sidebar\">\n  <li>\n    <a auto=\"active\" href=\"#/hot\">正在热映</a>\n  </li>\n  <li>\n    <a auto=\"active\" href=\"#/coming-soon\">即将上映</a>\n  </li>\n</ul>\n```\n","source":"_posts/angular-nav-auto-active.md","raw":"---\ntitle: Angular实现导航自动切换状态\ndate: 2016-05-02 16:18:50\ntags:\n  Angular\n---\n很多时候我们需要实现导航的自动状态切换，现整理一下一些常见的解决方案：\n\n#### 第一种：\n\n通过 $scope 暴露公共方法实现：\n\n```html\n<ul class=\"nav nav-sidebar\" ng-controller=\"NavController\">\n  <li ng-class=\"{active:isActive('/hot')}\">\n    <a href=\"#/hot\">\n      正在热映<span ng-if=\"isActive('/hot')\" class=\"sr-only\">(current)</span>\n    </a>\n  </li>\n  <li ng-class=\"{active:isActive('/coming-soon')}\">\n    <a href=\"#/coming-soon\">\n      即将上映<span ng-if=\"isActive('/coming-soon')\" class=\"sr-only\">(current)</span>\n    </a>\n  </li>\n</ul>\n```\n\n```javascript\napp.controller(\n  'NavController',\n  [\n    '$scope', '$location',\n    function($scope, $location) {\n      $scope.isActive = function(path) {\n        return $location.path().substr(0, path.length) === path;\n      };\n    }\n  ]\n);\n```\n\n实现思路就是通过视图模型上的isActive方法判断当前访问地址是否为此链接地址，从而决定是否添加active样式\n\n#### 第二种：\n\n定义一个指令封装这个逻辑：\n\n```javascript\nangular.module('app.components.nav', [])\n  .directive('auto', ['$location', function($location) {\n    return {\n      restrict: 'A',\n      link: function($scope, iElm, iAttrs, controller) {\n        var className = iAttrs.auto;\n        var path = iAttrs.href.substring(1);\n        $scope.location = $location;\n        $scope.$watch('location.path()', function(newPath) {\n          if (path === newPath) {\n            iElm.parent().addClass(className);\n          } else {\n            iElm.parent().removeClass(className);\n          }\n        });\n      }\n    };\n  }]);\n```\n\n```html\n<ul class=\"nav nav-sidebar\">\n  <li>\n    <a auto=\"active\" href=\"#/hot\">正在热映</a>\n  </li>\n  <li>\n    <a auto=\"active\" href=\"#/coming-soon\">即将上映</a>\n  </li>\n</ul>\n```\n","slug":"angular-nav-auto-active","published":1,"updated":"2016-05-02T08:41:32.000Z","_id":"cinpqyyv40001u5i12kt652lq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>很多时候我们需要实现导航的自动状态切换，现整理一下一些常见的解决方案：</p>\n<h4 id=\"第一种：\"><a href=\"#第一种：\" class=\"headerlink\" title=\"第一种：\"></a>第一种：</h4><p>通过 $scope 暴露公共方法实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-sidebar\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"NavController\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:isActive('/hot')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/hot\"</span>&gt;</span></span><br><span class=\"line\">      正在热映<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"isActive('/hot')\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:isActive('/coming-soon')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/coming-soon\"</span>&gt;</span></span><br><span class=\"line\">      即将上映<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"isActive('/coming-soon')\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(</span><br><span class=\"line\">  <span class=\"string\">'NavController'</span>,</span><br><span class=\"line\">  [</span><br><span class=\"line\">    <span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</span><br><span class=\"line\">      $scope.isActive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $location.path().substr(<span class=\"number\">0</span>, path.length) === path;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>实现思路就是通过视图模型上的isActive方法判断当前访问地址是否为此链接地址，从而决定是否添加active样式</p>\n<h4 id=\"第二种：\"><a href=\"#第二种：\" class=\"headerlink\" title=\"第二种：\"></a>第二种：</h4><p>定义一个指令封装这个逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'app.components.nav'</span>, [])</span><br><span class=\"line\">  .directive(<span class=\"string\">'auto'</span>, [<span class=\"string\">'$location'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$location</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> className = iAttrs.auto;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = iAttrs.href.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        $scope.location = $location;</span><br><span class=\"line\">        $scope.$watch(<span class=\"string\">'location.path()'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newPath</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (path === newPath) &#123;</span><br><span class=\"line\">            iElm.parent().addClass(className);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            iElm.parent().removeClass(className);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-sidebar\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">auto</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/hot\"</span>&gt;</span>正在热映<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">auto</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/coming-soon\"</span>&gt;</span>即将上映<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>很多时候我们需要实现导航的自动状态切换，现整理一下一些常见的解决方案：</p>\n<h4 id=\"第一种：\"><a href=\"#第一种：\" class=\"headerlink\" title=\"第一种：\"></a>第一种：</h4><p>通过 $scope 暴露公共方法实现：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-sidebar\"</span> <span class=\"attr\">ng-controller</span>=<span class=\"string\">\"NavController\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:isActive('/hot')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/hot\"</span>&gt;</span></span><br><span class=\"line\">      正在热映<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"isActive('/hot')\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ng-class</span>=<span class=\"string\">\"&#123;active:isActive('/coming-soon')&#125;\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/coming-soon\"</span>&gt;</span></span><br><span class=\"line\">      即将上映<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">ng-if</span>=<span class=\"string\">\"isActive('/coming-soon')\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"sr-only\"</span>&gt;</span>(current)<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(</span><br><span class=\"line\">  <span class=\"string\">'NavController'</span>,</span><br><span class=\"line\">  [</span><br><span class=\"line\">    <span class=\"string\">'$scope'</span>, <span class=\"string\">'$location'</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, $location</span>) </span>&#123;</span><br><span class=\"line\">      $scope.isActive = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> $location.path().substr(<span class=\"number\">0</span>, path.length) === path;</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>实现思路就是通过视图模型上的isActive方法判断当前访问地址是否为此链接地址，从而决定是否添加active样式</p>\n<h4 id=\"第二种：\"><a href=\"#第二种：\" class=\"headerlink\" title=\"第二种：\"></a>第二种：</h4><p>定义一个指令封装这个逻辑：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">angular.module(<span class=\"string\">'app.components.nav'</span>, [])</span><br><span class=\"line\">  .directive(<span class=\"string\">'auto'</span>, [<span class=\"string\">'$location'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$location</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">      link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, iElm, iAttrs, controller</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> className = iAttrs.auto;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> path = iAttrs.href.substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">        $scope.location = $location;</span><br><span class=\"line\">        $scope.$watch(<span class=\"string\">'location.path()'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newPath</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (path === newPath) &#123;</span><br><span class=\"line\">            iElm.parent().addClass(className);</span><br><span class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            iElm.parent().removeClass(className);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;]);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"nav nav-sidebar\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">auto</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/hot\"</span>&gt;</span>正在热映<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">auto</span>=<span class=\"string\">\"active\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#/coming-soon\"</span>&gt;</span>即将上映<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"通过ng-cloak指令解决Angular表达式闪烁问题","date":"2016-05-02T08:19:53.000Z","_content":"### 问题\n\n表达式的使用在AngularJS应用开发过程中经常遇到，其作用就是输出一个值到HTML的指定位置，例如：\n\n```html\n<strong>{{todos.length}}</strong>\n```\n\n效果就是将`todos.length`的值输出到`<strong></strong>`标签中，同时可以完成自动化的数据同步，十分方便。\n\n但是方便的背后也是有一些问题的，这个功能类似于一些服务端的模板引擎，比如Handlebars、xTemplate中都有这种表达式的功能，可是AngularJS始终还是一个JavaScript的框架，是JS框架，就必须在浏览器中执行。\n\nJavaScript的执行需要时间的，在这个时间内，浏览器任然会将这个标记作为普通的内容渲染到界面上，当JS执行完成则会将这个标记替换为对应的内容。\n\n在这个过程中会出现从标记转换为真实数据的跳跃，而且为了体验也不应该将标记显示到界面上，那么怎么办？\n\n### 解决方案\n\n#### 1. 使用ng-bind指令替换表达式：\n\n```html\n<strong ng-bind=\"todos.length\"></strong>\n```\n\n使用这种方式就不会再界面上显示表达式的内容，html对不认识的属性采取不予理睬的态度，所以没有什么影响\n\n#### 2. 使用ng-cloak指令：\n\n```html\n<div ng-cloak>\n  <strong>{{todos.length}}</strong>\n</div>\n```\n\n原因是angularjs源码最后添加该样式隐藏：\n\n```javascript\nwindow.angular.element(document).find(\"head\")\n  .prepend('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}');\n```\n\n在所有使用表达式的容器上添加ng-cloak的属性或者添加ng-cloak的类，这样就可以解决这个问题了，因为ng-cloak指令功能就是在AngularJS任务执行完成以后，自动去除当前元素的ng-cloak的属性或者ng-cloak的类，利用这个特点可以解决以上的问题，不过测试表明需要我们自己手动添加一个隐藏ng-cloak元素的样式：\n\n```css\n[ng-cloak],\n.ng-cloak{\n  display:none !important;\n}\n```\n\n原因很简单，这个样式默认是angularjs添加的，但是此时元素大多数情况下已经渲染完成了，所以丧失了意义。\n","source":"_posts/angular-ng-cloak-directive.md","raw":"---\ntitle: 通过ng-cloak指令解决Angular表达式闪烁问题\ndate: 2016-05-02 16:19:53\ntags:\n  Angular\n---\n### 问题\n\n表达式的使用在AngularJS应用开发过程中经常遇到，其作用就是输出一个值到HTML的指定位置，例如：\n\n```html\n<strong>{{todos.length}}</strong>\n```\n\n效果就是将`todos.length`的值输出到`<strong></strong>`标签中，同时可以完成自动化的数据同步，十分方便。\n\n但是方便的背后也是有一些问题的，这个功能类似于一些服务端的模板引擎，比如Handlebars、xTemplate中都有这种表达式的功能，可是AngularJS始终还是一个JavaScript的框架，是JS框架，就必须在浏览器中执行。\n\nJavaScript的执行需要时间的，在这个时间内，浏览器任然会将这个标记作为普通的内容渲染到界面上，当JS执行完成则会将这个标记替换为对应的内容。\n\n在这个过程中会出现从标记转换为真实数据的跳跃，而且为了体验也不应该将标记显示到界面上，那么怎么办？\n\n### 解决方案\n\n#### 1. 使用ng-bind指令替换表达式：\n\n```html\n<strong ng-bind=\"todos.length\"></strong>\n```\n\n使用这种方式就不会再界面上显示表达式的内容，html对不认识的属性采取不予理睬的态度，所以没有什么影响\n\n#### 2. 使用ng-cloak指令：\n\n```html\n<div ng-cloak>\n  <strong>{{todos.length}}</strong>\n</div>\n```\n\n原因是angularjs源码最后添加该样式隐藏：\n\n```javascript\nwindow.angular.element(document).find(\"head\")\n  .prepend('<style type=\"text/css\">@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide{display:none !important;}');\n```\n\n在所有使用表达式的容器上添加ng-cloak的属性或者添加ng-cloak的类，这样就可以解决这个问题了，因为ng-cloak指令功能就是在AngularJS任务执行完成以后，自动去除当前元素的ng-cloak的属性或者ng-cloak的类，利用这个特点可以解决以上的问题，不过测试表明需要我们自己手动添加一个隐藏ng-cloak元素的样式：\n\n```css\n[ng-cloak],\n.ng-cloak{\n  display:none !important;\n}\n```\n\n原因很简单，这个样式默认是angularjs添加的，但是此时元素大多数情况下已经渲染完成了，所以丧失了意义。\n","slug":"angular-ng-cloak-directive","published":1,"updated":"2016-05-02T08:31:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyvc0003u5i1c1ucnfwu","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>表达式的使用在AngularJS应用开发过程中经常遇到，其作用就是输出一个值到HTML的指定位置，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123;todos.length&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果就是将<code>todos.length</code>的值输出到<code>&lt;strong&gt;&lt;/strong&gt;</code>标签中，同时可以完成自动化的数据同步，十分方便。</p>\n<p>但是方便的背后也是有一些问题的，这个功能类似于一些服务端的模板引擎，比如Handlebars、xTemplate中都有这种表达式的功能，可是AngularJS始终还是一个JavaScript的框架，是JS框架，就必须在浏览器中执行。</p>\n<p>JavaScript的执行需要时间的，在这个时间内，浏览器任然会将这个标记作为普通的内容渲染到界面上，当JS执行完成则会将这个标记替换为对应的内容。</p>\n<p>在这个过程中会出现从标记转换为真实数据的跳跃，而且为了体验也不应该将标记显示到界面上，那么怎么办？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"1-使用ng-bind指令替换表达式：\"><a href=\"#1-使用ng-bind指令替换表达式：\" class=\"headerlink\" title=\"1. 使用ng-bind指令替换表达式：\"></a>1. 使用ng-bind指令替换表达式：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"todos.length\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用这种方式就不会再界面上显示表达式的内容，html对不认识的属性采取不予理睬的态度，所以没有什么影响</p>\n<h4 id=\"2-使用ng-cloak指令：\"><a href=\"#2-使用ng-cloak指令：\" class=\"headerlink\" title=\"2. 使用ng-cloak指令：\"></a>2. 使用ng-cloak指令：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-cloak</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123;todos.length&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原因是angularjs源码最后添加该样式隐藏：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.angular.element(<span class=\"built_in\">document</span>).find(<span class=\"string\">\"head\"</span>)</span><br><span class=\"line\">  .prepend(<span class=\"string\">'&lt;style type=\"text/css\"&gt;@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide&#123;display:none !important;&#125;'</span>);</span><br></pre></td></tr></table></figure>\n<p>在所有使用表达式的容器上添加ng-cloak的属性或者添加ng-cloak的类，这样就可以解决这个问题了，因为ng-cloak指令功能就是在AngularJS任务执行完成以后，自动去除当前元素的ng-cloak的属性或者ng-cloak的类，利用这个特点可以解决以上的问题，不过测试表明需要我们自己手动添加一个隐藏ng-cloak元素的样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[ng-cloak]</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.ng-cloak</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因很简单，这个样式默认是angularjs添加的，但是此时元素大多数情况下已经渲染完成了，所以丧失了意义。</p>\n","excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>表达式的使用在AngularJS应用开发过程中经常遇到，其作用就是输出一个值到HTML的指定位置，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123;todos.length&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>效果就是将<code>todos.length</code>的值输出到<code>&lt;strong&gt;&lt;/strong&gt;</code>标签中，同时可以完成自动化的数据同步，十分方便。</p>\n<p>但是方便的背后也是有一些问题的，这个功能类似于一些服务端的模板引擎，比如Handlebars、xTemplate中都有这种表达式的功能，可是AngularJS始终还是一个JavaScript的框架，是JS框架，就必须在浏览器中执行。</p>\n<p>JavaScript的执行需要时间的，在这个时间内，浏览器任然会将这个标记作为普通的内容渲染到界面上，当JS执行完成则会将这个标记替换为对应的内容。</p>\n<p>在这个过程中会出现从标记转换为真实数据的跳跃，而且为了体验也不应该将标记显示到界面上，那么怎么办？</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><h4 id=\"1-使用ng-bind指令替换表达式：\"><a href=\"#1-使用ng-bind指令替换表达式：\" class=\"headerlink\" title=\"1. 使用ng-bind指令替换表达式：\"></a>1. 使用ng-bind指令替换表达式：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">strong</span> <span class=\"attr\">ng-bind</span>=<span class=\"string\">\"todos.length\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>使用这种方式就不会再界面上显示表达式的内容，html对不认识的属性采取不予理睬的态度，所以没有什么影响</p>\n<h4 id=\"2-使用ng-cloak指令：\"><a href=\"#2-使用ng-cloak指令：\" class=\"headerlink\" title=\"2. 使用ng-cloak指令：\"></a>2. 使用ng-cloak指令：</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-cloak</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">strong</span>&gt;</span>&#123;&#123;todos.length&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">strong</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>原因是angularjs源码最后添加该样式隐藏：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.angular.element(<span class=\"built_in\">document</span>).find(<span class=\"string\">\"head\"</span>)</span><br><span class=\"line\">  .prepend(<span class=\"string\">'&lt;style type=\"text/css\"&gt;@charset \"UTF-8\";[ng\\\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide&#123;display:none !important;&#125;'</span>);</span><br></pre></td></tr></table></figure>\n<p>在所有使用表达式的容器上添加ng-cloak的属性或者添加ng-cloak的类，这样就可以解决这个问题了，因为ng-cloak指令功能就是在AngularJS任务执行完成以后，自动去除当前元素的ng-cloak的属性或者ng-cloak的类，利用这个特点可以解决以上的问题，不过测试表明需要我们自己手动添加一个隐藏ng-cloak元素的样式：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-attr\">[ng-cloak]</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.ng-cloak</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:none <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>原因很简单，这个样式默认是angularjs添加的，但是此时元素大多数情况下已经渲染完成了，所以丧失了意义。</p>\n"},{"title":"配置Chrome支持本地（file协议）的AJAX请求","date":"2016-05-02T08:19:27.000Z","_content":"### 什么问题\n\nWEB开发过程中，很多时候我们都是写一些简单的Demo，并不是开发一个完整项目，此时我们常见的操作是：\n\n- 新建文件夹\n- 新建需要的文件\n- 在Sublime（或其他编辑器）中完成DEMO的编码\n- 双击HTML文件，直接在浏览器中运行演示\n\n如果此时Demo中有AJAX操作，浏览器就会报一个错：\n\n> `XMLHttpRequest cannot load file:///Users/iceStone/Documents/Learning/angular/demo/angular-moviecat/movie/view.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.`\n\n原因很简单，浏览器（Webkit内核）的安全策略决定了file协议访问的应用无法使用`XMLHttpRequest`对象，错误消息中也很清楚的说明了：\n\n> Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.\n\n> 跨域请求仅支持协议：http, data, chrome, chrome-extension, https, chrome-extension-resource\n\n在某些浏览器中是允许这种操作的，比如Firefox浏览器，也就是说Filefox支持file协议下的AJAX请求。\n\n### 解决办法\n\n作为我个人最喜欢的Chrome，强大，没什么好说的，只有想不到，几乎没有做不到，所以必须也得支持：\n\n- Windows：\n  + 设置Chrome的快捷方式属性，在“目标”后面加上--allow-file-access-from-files，注意前面有个空格，重新打开Chrome即可。\n  + ![](http://files.wedn.net/2016/01/chrome-link-setting-1453637228774.jpg)\n- Mac：\n  + 只能通过终端打开浏览器：打开终端，输入下面命令：open -a \"Google Chrome\" --args --disable-web-security然后就可以屏蔽安全访问了[ --args：此参数可有可无]\n\n### 补充说明\n\n长久来看，你肯定是需要通过HTTP的方式访问你的应用，那就需要配置HTTP服务器软件。但是对于一些刚入门的同学，配一个HTTP服务器（比如Apache、IIS等）比较繁琐，望而却步。\n\n- 对于使用IDE的同学没什么好说的，每个用于Web开发的IDE都内置http服务器，不用单独配置。\n- 对于喜欢轻量级编辑器的同学，比如Sublime Text，它默认是没有内置HTTP服务器的\n\n接下来推荐一款Sublime的插件`Sublime Server`，这个插件可以提供一个静态文件HTTP服务器，具体使用方式如下：\n\n- 安装Package Control（Sublime的插件管理工具），不会安装自行Google\n- `Command+Shift+P`或`Ctrl+Shift+P`打开命令面板，输入`Package Control: Install Package`\n\n  ![Install Package](http://files.wedn.net/2016/01/install-step-01-1453630478271.png)\n\n- 稍等片刻（此时会连接到插件提供商的服务器，比较慢，有可能背墙），搜索`SublimeServer`\n\n  ![SublimeServer](http://files.wedn.net/2016/01/install-step-02-1453630571261.png)\n\n- 安装完成过后通过`Tool → SublimeServer → Start SublimeServer`\n\n  ![Start SublimeServer](http://files.wedn.net/2016/01/usage-step-01-1453630756940.png)\n\n- **一定要用打开文件夹的方式使用Sublime**，否则没有办法正常使用SublimeServer。\n\n  ![打开文件夹的方式使用Sublime](http://files.wedn.net/2016/01/open-folder-in-sublime-1453630966189.png)\n\n- 打开HTML文件，在右键菜单中选择`View in SublimeServer`，此时就可以以HTTP方式在浏览器中访问该文件了，\n- 如果该选项是灰色的，那就说明没有启动SublimeServer，`Tool → SublimeServer → Start SublimeServer`\n\n到此为止，你已经可以在Sublime中使用HTTP服务器了。\n\n#### 可能遇到的问题\n\n如果`Start SublimeServer`不能点，可能是当前`8080`端口被占用了（SublimeServer默认使用8080端口）\n\n解决方法就是打开配置文件将端口修改为其他端口：\n\n  ![打开SublimeServer设置文件](http://files.wedn.net/2016/01/sublime-server-settings-1453631342548.png)\n\n以下是我的配置：\n```json\n{\n  \"attempts\": 5,\n  \"autorun\": false, // 是否在启动Sublime时自动启动SublimeServer\n  \"defaultExtension\": \".html\",\n  \"interval\": 500,\n  \"mimetypes\":\n  {\n    \"\": \"application/octet-stream\",\n    \".c\": \"text/plain\",\n    \".h\": \"text/plain\",\n    \".py\": \"text/plain\"\n  },\n  \"port\": 2016 // 端口号\n}\n```\n\n当然其他编辑器也有类似的插件。\n","source":"_posts/chrome-file-protocol-support-ajax.md","raw":"---\ntitle: 配置Chrome支持本地（file协议）的AJAX请求\ndate: 2016-05-02 16:19:27\ntags:\n  Chrome\n  AJAX\n  Sublime\n---\n### 什么问题\n\nWEB开发过程中，很多时候我们都是写一些简单的Demo，并不是开发一个完整项目，此时我们常见的操作是：\n\n- 新建文件夹\n- 新建需要的文件\n- 在Sublime（或其他编辑器）中完成DEMO的编码\n- 双击HTML文件，直接在浏览器中运行演示\n\n如果此时Demo中有AJAX操作，浏览器就会报一个错：\n\n> `XMLHttpRequest cannot load file:///Users/iceStone/Documents/Learning/angular/demo/angular-moviecat/movie/view.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.`\n\n原因很简单，浏览器（Webkit内核）的安全策略决定了file协议访问的应用无法使用`XMLHttpRequest`对象，错误消息中也很清楚的说明了：\n\n> Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.\n\n> 跨域请求仅支持协议：http, data, chrome, chrome-extension, https, chrome-extension-resource\n\n在某些浏览器中是允许这种操作的，比如Firefox浏览器，也就是说Filefox支持file协议下的AJAX请求。\n\n### 解决办法\n\n作为我个人最喜欢的Chrome，强大，没什么好说的，只有想不到，几乎没有做不到，所以必须也得支持：\n\n- Windows：\n  + 设置Chrome的快捷方式属性，在“目标”后面加上--allow-file-access-from-files，注意前面有个空格，重新打开Chrome即可。\n  + ![](http://files.wedn.net/2016/01/chrome-link-setting-1453637228774.jpg)\n- Mac：\n  + 只能通过终端打开浏览器：打开终端，输入下面命令：open -a \"Google Chrome\" --args --disable-web-security然后就可以屏蔽安全访问了[ --args：此参数可有可无]\n\n### 补充说明\n\n长久来看，你肯定是需要通过HTTP的方式访问你的应用，那就需要配置HTTP服务器软件。但是对于一些刚入门的同学，配一个HTTP服务器（比如Apache、IIS等）比较繁琐，望而却步。\n\n- 对于使用IDE的同学没什么好说的，每个用于Web开发的IDE都内置http服务器，不用单独配置。\n- 对于喜欢轻量级编辑器的同学，比如Sublime Text，它默认是没有内置HTTP服务器的\n\n接下来推荐一款Sublime的插件`Sublime Server`，这个插件可以提供一个静态文件HTTP服务器，具体使用方式如下：\n\n- 安装Package Control（Sublime的插件管理工具），不会安装自行Google\n- `Command+Shift+P`或`Ctrl+Shift+P`打开命令面板，输入`Package Control: Install Package`\n\n  ![Install Package](http://files.wedn.net/2016/01/install-step-01-1453630478271.png)\n\n- 稍等片刻（此时会连接到插件提供商的服务器，比较慢，有可能背墙），搜索`SublimeServer`\n\n  ![SublimeServer](http://files.wedn.net/2016/01/install-step-02-1453630571261.png)\n\n- 安装完成过后通过`Tool → SublimeServer → Start SublimeServer`\n\n  ![Start SublimeServer](http://files.wedn.net/2016/01/usage-step-01-1453630756940.png)\n\n- **一定要用打开文件夹的方式使用Sublime**，否则没有办法正常使用SublimeServer。\n\n  ![打开文件夹的方式使用Sublime](http://files.wedn.net/2016/01/open-folder-in-sublime-1453630966189.png)\n\n- 打开HTML文件，在右键菜单中选择`View in SublimeServer`，此时就可以以HTTP方式在浏览器中访问该文件了，\n- 如果该选项是灰色的，那就说明没有启动SublimeServer，`Tool → SublimeServer → Start SublimeServer`\n\n到此为止，你已经可以在Sublime中使用HTTP服务器了。\n\n#### 可能遇到的问题\n\n如果`Start SublimeServer`不能点，可能是当前`8080`端口被占用了（SublimeServer默认使用8080端口）\n\n解决方法就是打开配置文件将端口修改为其他端口：\n\n  ![打开SublimeServer设置文件](http://files.wedn.net/2016/01/sublime-server-settings-1453631342548.png)\n\n以下是我的配置：\n```json\n{\n  \"attempts\": 5,\n  \"autorun\": false, // 是否在启动Sublime时自动启动SublimeServer\n  \"defaultExtension\": \".html\",\n  \"interval\": 500,\n  \"mimetypes\":\n  {\n    \"\": \"application/octet-stream\",\n    \".c\": \"text/plain\",\n    \".h\": \"text/plain\",\n    \".py\": \"text/plain\"\n  },\n  \"port\": 2016 // 端口号\n}\n```\n\n当然其他编辑器也有类似的插件。\n","slug":"chrome-file-protocol-support-ajax","published":1,"updated":"2016-05-02T08:30:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyve0004u5i1e2ju9vxh","content":"<h3 id=\"什么问题\"><a href=\"#什么问题\" class=\"headerlink\" title=\"什么问题\"></a>什么问题</h3><p>WEB开发过程中，很多时候我们都是写一些简单的Demo，并不是开发一个完整项目，此时我们常见的操作是：</p>\n<ul>\n<li>新建文件夹</li>\n<li>新建需要的文件</li>\n<li>在Sublime（或其他编辑器）中完成DEMO的编码</li>\n<li>双击HTML文件，直接在浏览器中运行演示</li>\n</ul>\n<p>如果此时Demo中有AJAX操作，浏览器就会报一个错：</p>\n<blockquote>\n<p><code>XMLHttpRequest cannot load file:///Users/iceStone/Documents/Learning/angular/demo/angular-moviecat/movie/view.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.</code></p>\n</blockquote>\n<p>原因很简单，浏览器（Webkit内核）的安全策略决定了file协议访问的应用无法使用<code>XMLHttpRequest</code>对象，错误消息中也很清楚的说明了：</p>\n<blockquote>\n<p>Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.</p>\n<p>跨域请求仅支持协议：http, data, chrome, chrome-extension, https, chrome-extension-resource</p>\n</blockquote>\n<p>在某些浏览器中是允许这种操作的，比如Firefox浏览器，也就是说Filefox支持file协议下的AJAX请求。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>作为我个人最喜欢的Chrome，强大，没什么好说的，只有想不到，几乎没有做不到，所以必须也得支持：</p>\n<ul>\n<li>Windows：<ul>\n<li>设置Chrome的快捷方式属性，在“目标”后面加上–allow-file-access-from-files，注意前面有个空格，重新打开Chrome即可。</li>\n<li><img src=\"http://files.wedn.net/2016/01/chrome-link-setting-1453637228774.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>Mac：<ul>\n<li>只能通过终端打开浏览器：打开终端，输入下面命令：open -a “Google Chrome” –args –disable-web-security然后就可以屏蔽安全访问了[ –args：此参数可有可无]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h3><p>长久来看，你肯定是需要通过HTTP的方式访问你的应用，那就需要配置HTTP服务器软件。但是对于一些刚入门的同学，配一个HTTP服务器（比如Apache、IIS等）比较繁琐，望而却步。</p>\n<ul>\n<li>对于使用IDE的同学没什么好说的，每个用于Web开发的IDE都内置http服务器，不用单独配置。</li>\n<li>对于喜欢轻量级编辑器的同学，比如Sublime Text，它默认是没有内置HTTP服务器的</li>\n</ul>\n<p>接下来推荐一款Sublime的插件<code>Sublime Server</code>，这个插件可以提供一个静态文件HTTP服务器，具体使用方式如下：</p>\n<ul>\n<li>安装Package Control（Sublime的插件管理工具），不会安装自行Google</li>\n<li><p><code>Command+Shift+P</code>或<code>Ctrl+Shift+P</code>打开命令面板，输入<code>Package Control: Install Package</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/install-step-01-1453630478271.png\" alt=\"Install Package\"></p>\n</li>\n<li><p>稍等片刻（此时会连接到插件提供商的服务器，比较慢，有可能背墙），搜索<code>SublimeServer</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/install-step-02-1453630571261.png\" alt=\"SublimeServer\"></p>\n</li>\n<li><p>安装完成过后通过<code>Tool → SublimeServer → Start SublimeServer</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/usage-step-01-1453630756940.png\" alt=\"Start SublimeServer\"></p>\n</li>\n<li><p><strong>一定要用打开文件夹的方式使用Sublime</strong>，否则没有办法正常使用SublimeServer。</p>\n<p><img src=\"http://files.wedn.net/2016/01/open-folder-in-sublime-1453630966189.png\" alt=\"打开文件夹的方式使用Sublime\"></p>\n</li>\n<li><p>打开HTML文件，在右键菜单中选择<code>View in SublimeServer</code>，此时就可以以HTTP方式在浏览器中访问该文件了，</p>\n</li>\n<li>如果该选项是灰色的，那就说明没有启动SublimeServer，<code>Tool → SublimeServer → Start SublimeServer</code></li>\n</ul>\n<p>到此为止，你已经可以在Sublime中使用HTTP服务器了。</p>\n<h4 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h4><p>如果<code>Start SublimeServer</code>不能点，可能是当前<code>8080</code>端口被占用了（SublimeServer默认使用8080端口）</p>\n<p>解决方法就是打开配置文件将端口修改为其他端口：</p>\n<p>  <img src=\"http://files.wedn.net/2016/01/sublime-server-settings-1453631342548.png\" alt=\"打开SublimeServer设置文件\"></p>\n<p>以下是我的配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"attempts\": 5,</span><br><span class=\"line\">  \"autorun\": false, // 是否在启动Sublime时自动启动SublimeServer</span><br><span class=\"line\">  \"defaultExtension\": \".html\",</span><br><span class=\"line\">  \"interval\": 500,</span><br><span class=\"line\">  \"mimetypes\":</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    \"\": \"application/octet-stream\",</span><br><span class=\"line\">    \".c\": \"text/plain\",</span><br><span class=\"line\">    \".h\": \"text/plain\",</span><br><span class=\"line\">    \".py\": \"text/plain\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"port\": 2016 // 端口号</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然其他编辑器也有类似的插件。</p>\n","excerpt":"","more":"<h3 id=\"什么问题\"><a href=\"#什么问题\" class=\"headerlink\" title=\"什么问题\"></a>什么问题</h3><p>WEB开发过程中，很多时候我们都是写一些简单的Demo，并不是开发一个完整项目，此时我们常见的操作是：</p>\n<ul>\n<li>新建文件夹</li>\n<li>新建需要的文件</li>\n<li>在Sublime（或其他编辑器）中完成DEMO的编码</li>\n<li>双击HTML文件，直接在浏览器中运行演示</li>\n</ul>\n<p>如果此时Demo中有AJAX操作，浏览器就会报一个错：</p>\n<blockquote>\n<p><code>XMLHttpRequest cannot load file:///Users/iceStone/Documents/Learning/angular/demo/angular-moviecat/movie/view.html. Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.</code></p>\n</blockquote>\n<p>原因很简单，浏览器（Webkit内核）的安全策略决定了file协议访问的应用无法使用<code>XMLHttpRequest</code>对象，错误消息中也很清楚的说明了：</p>\n<blockquote>\n<p>Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https, chrome-extension-resource.</p>\n<p>跨域请求仅支持协议：http, data, chrome, chrome-extension, https, chrome-extension-resource</p>\n</blockquote>\n<p>在某些浏览器中是允许这种操作的，比如Firefox浏览器，也就是说Filefox支持file协议下的AJAX请求。</p>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><p>作为我个人最喜欢的Chrome，强大，没什么好说的，只有想不到，几乎没有做不到，所以必须也得支持：</p>\n<ul>\n<li>Windows：<ul>\n<li>设置Chrome的快捷方式属性，在“目标”后面加上–allow-file-access-from-files，注意前面有个空格，重新打开Chrome即可。</li>\n<li><img src=\"http://files.wedn.net/2016/01/chrome-link-setting-1453637228774.jpg\" alt=\"\"></li>\n</ul>\n</li>\n<li>Mac：<ul>\n<li>只能通过终端打开浏览器：打开终端，输入下面命令：open -a “Google Chrome” –args –disable-web-security然后就可以屏蔽安全访问了[ –args：此参数可有可无]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h3><p>长久来看，你肯定是需要通过HTTP的方式访问你的应用，那就需要配置HTTP服务器软件。但是对于一些刚入门的同学，配一个HTTP服务器（比如Apache、IIS等）比较繁琐，望而却步。</p>\n<ul>\n<li>对于使用IDE的同学没什么好说的，每个用于Web开发的IDE都内置http服务器，不用单独配置。</li>\n<li>对于喜欢轻量级编辑器的同学，比如Sublime Text，它默认是没有内置HTTP服务器的</li>\n</ul>\n<p>接下来推荐一款Sublime的插件<code>Sublime Server</code>，这个插件可以提供一个静态文件HTTP服务器，具体使用方式如下：</p>\n<ul>\n<li>安装Package Control（Sublime的插件管理工具），不会安装自行Google</li>\n<li><p><code>Command+Shift+P</code>或<code>Ctrl+Shift+P</code>打开命令面板，输入<code>Package Control: Install Package</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/install-step-01-1453630478271.png\" alt=\"Install Package\"></p>\n</li>\n<li><p>稍等片刻（此时会连接到插件提供商的服务器，比较慢，有可能背墙），搜索<code>SublimeServer</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/install-step-02-1453630571261.png\" alt=\"SublimeServer\"></p>\n</li>\n<li><p>安装完成过后通过<code>Tool → SublimeServer → Start SublimeServer</code></p>\n<p><img src=\"http://files.wedn.net/2016/01/usage-step-01-1453630756940.png\" alt=\"Start SublimeServer\"></p>\n</li>\n<li><p><strong>一定要用打开文件夹的方式使用Sublime</strong>，否则没有办法正常使用SublimeServer。</p>\n<p><img src=\"http://files.wedn.net/2016/01/open-folder-in-sublime-1453630966189.png\" alt=\"打开文件夹的方式使用Sublime\"></p>\n</li>\n<li><p>打开HTML文件，在右键菜单中选择<code>View in SublimeServer</code>，此时就可以以HTTP方式在浏览器中访问该文件了，</p>\n</li>\n<li>如果该选项是灰色的，那就说明没有启动SublimeServer，<code>Tool → SublimeServer → Start SublimeServer</code></li>\n</ul>\n<p>到此为止，你已经可以在Sublime中使用HTTP服务器了。</p>\n<h4 id=\"可能遇到的问题\"><a href=\"#可能遇到的问题\" class=\"headerlink\" title=\"可能遇到的问题\"></a>可能遇到的问题</h4><p>如果<code>Start SublimeServer</code>不能点，可能是当前<code>8080</code>端口被占用了（SublimeServer默认使用8080端口）</p>\n<p>解决方法就是打开配置文件将端口修改为其他端口：</p>\n<p>  <img src=\"http://files.wedn.net/2016/01/sublime-server-settings-1453631342548.png\" alt=\"打开SublimeServer设置文件\"></p>\n<p>以下是我的配置：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  \"attempts\": 5,</span><br><span class=\"line\">  \"autorun\": false, // 是否在启动Sublime时自动启动SublimeServer</span><br><span class=\"line\">  \"defaultExtension\": \".html\",</span><br><span class=\"line\">  \"interval\": 500,</span><br><span class=\"line\">  \"mimetypes\":</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    \"\": \"application/octet-stream\",</span><br><span class=\"line\">    \".c\": \"text/plain\",</span><br><span class=\"line\">    \".h\": \"text/plain\",</span><br><span class=\"line\">    \".py\": \"text/plain\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"port\": 2016 // 端口号</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然其他编辑器也有类似的插件。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-03-20T07:08:51.000Z","updated":"2016-03-20T07:08:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyvg0006u5i1ur8hqqzl","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"JavaScript 计算循环节","date":"2016-05-02T08:21:38.000Z","_content":"### 如何计算循环节长度呢？\n\n想想我们手算，如果余数比除数小，我们会在后面补0然后再除。也就是说补零之后的数是下一次的被除数。如果被除数重复出现，除数确定的，那么商和余数也就是一样的。这时，循环节就出现了。\n\n### 下面的函数分为两部分，\n\n1. 补零操作\n2. 查找有没有同样的被除数存在，如果有，就找到了循环节，计算循环节长度并返回。在没有找到的前提下，把当前被除数记录下来，并得到余数作为下一次的被除数。\n这里需要注意，如果某一次出现了除尽的情况，说明该分数是有限小数，循环节长度是0。\n\n```javascript\nconsole.log(foo(11, 3));\nconsole.log(foo(1, 7));;\nconsole.log(foo(2, 10));;\nfunction foo(a, b) {\n  if (!(a % b)) {\n    return `${a}÷${b}:${a / b}`;\n  }\n  var all = (a / b).toString().split('.');\n  var i = getCycleSection(a, b);\n  if(i)\n    return `${a}÷${b}: ${all[0]}.{${all[1].substr(0, i) }}`;\n    return `${a}÷${b}: ${a / b}`;\n\n}\nfunction getCycleSection(n, m) {\n  var temp = [];\n  while (true) {\n    while (n < m) {\n      n *= 10;\n    }\n    var index = temp.indexOf(n);\n    if (index >= 0) {\n      return temp.length - index;\n    }\n    temp.push(n);\n    n %= m;\n    if (!n)\n      return 0;\n  }\n}\n```\n","source":"_posts/javascript-recurring-cycle.md","raw":"---\ntitle: JavaScript 计算循环节\ndate: 2016-05-02 16:21:38\ntags:\n  JavaScript\n---\n### 如何计算循环节长度呢？\n\n想想我们手算，如果余数比除数小，我们会在后面补0然后再除。也就是说补零之后的数是下一次的被除数。如果被除数重复出现，除数确定的，那么商和余数也就是一样的。这时，循环节就出现了。\n\n### 下面的函数分为两部分，\n\n1. 补零操作\n2. 查找有没有同样的被除数存在，如果有，就找到了循环节，计算循环节长度并返回。在没有找到的前提下，把当前被除数记录下来，并得到余数作为下一次的被除数。\n这里需要注意，如果某一次出现了除尽的情况，说明该分数是有限小数，循环节长度是0。\n\n```javascript\nconsole.log(foo(11, 3));\nconsole.log(foo(1, 7));;\nconsole.log(foo(2, 10));;\nfunction foo(a, b) {\n  if (!(a % b)) {\n    return `${a}÷${b}:${a / b}`;\n  }\n  var all = (a / b).toString().split('.');\n  var i = getCycleSection(a, b);\n  if(i)\n    return `${a}÷${b}: ${all[0]}.{${all[1].substr(0, i) }}`;\n    return `${a}÷${b}: ${a / b}`;\n\n}\nfunction getCycleSection(n, m) {\n  var temp = [];\n  while (true) {\n    while (n < m) {\n      n *= 10;\n    }\n    var index = temp.indexOf(n);\n    if (index >= 0) {\n      return temp.length - index;\n    }\n    temp.push(n);\n    n %= m;\n    if (!n)\n      return 0;\n  }\n}\n```\n","slug":"javascript-recurring-cycle","published":1,"updated":"2016-05-02T08:27:04.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyvm0008u5i11k1di894","content":"<h3 id=\"如何计算循环节长度呢？\"><a href=\"#如何计算循环节长度呢？\" class=\"headerlink\" title=\"如何计算循环节长度呢？\"></a>如何计算循环节长度呢？</h3><p>想想我们手算，如果余数比除数小，我们会在后面补0然后再除。也就是说补零之后的数是下一次的被除数。如果被除数重复出现，除数确定的，那么商和余数也就是一样的。这时，循环节就出现了。</p>\n<h3 id=\"下面的函数分为两部分，\"><a href=\"#下面的函数分为两部分，\" class=\"headerlink\" title=\"下面的函数分为两部分，\"></a>下面的函数分为两部分，</h3><ol>\n<li>补零操作</li>\n<li>查找有没有同样的被除数存在，如果有，就找到了循环节，计算循环节长度并返回。在没有找到的前提下，把当前被除数记录下来，并得到余数作为下一次的被除数。<br>这里需要注意，如果某一次出现了除尽的情况，说明该分数是有限小数，循环节长度是0。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">7</span>));;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">2</span>, <span class=\"number\">10</span>));;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(a % b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>:<span class=\"subst\">$&#123;a / b&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> all = (a / b).toString().split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = getCycleSection(a, b);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>: <span class=\"subst\">$&#123;all[0]&#125;</span>.&#123;<span class=\"subst\">$&#123;all[1].substr(0, i) &#125;</span>&#125;`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>: <span class=\"subst\">$&#123;a / b&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCycleSection</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; m) &#123;</span><br><span class=\"line\">      n *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = temp.indexOf(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> temp.length - index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp.push(n);</span><br><span class=\"line\">    n %= m;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!n)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"如何计算循环节长度呢？\"><a href=\"#如何计算循环节长度呢？\" class=\"headerlink\" title=\"如何计算循环节长度呢？\"></a>如何计算循环节长度呢？</h3><p>想想我们手算，如果余数比除数小，我们会在后面补0然后再除。也就是说补零之后的数是下一次的被除数。如果被除数重复出现，除数确定的，那么商和余数也就是一样的。这时，循环节就出现了。</p>\n<h3 id=\"下面的函数分为两部分，\"><a href=\"#下面的函数分为两部分，\" class=\"headerlink\" title=\"下面的函数分为两部分，\"></a>下面的函数分为两部分，</h3><ol>\n<li>补零操作</li>\n<li>查找有没有同样的被除数存在，如果有，就找到了循环节，计算循环节长度并返回。在没有找到的前提下，把当前被除数记录下来，并得到余数作为下一次的被除数。<br>这里需要注意，如果某一次出现了除尽的情况，说明该分数是有限小数，循环节长度是0。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">11</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">1</span>, <span class=\"number\">7</span>));;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo(<span class=\"number\">2</span>, <span class=\"number\">10</span>));;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(a % b)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>:<span class=\"subst\">$&#123;a / b&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> all = (a / b).toString().split(<span class=\"string\">'.'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> i = getCycleSection(a, b);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(i)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>: <span class=\"subst\">$&#123;all[0]&#125;</span>.&#123;<span class=\"subst\">$&#123;all[1].substr(0, i) &#125;</span>&#125;`</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;a&#125;</span>÷<span class=\"subst\">$&#123;b&#125;</span>: <span class=\"subst\">$&#123;a / b&#125;</span>`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCycleSection</span>(<span class=\"params\">n, m</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> temp = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &lt; m) &#123;</span><br><span class=\"line\">      n *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> index = temp.indexOf(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> temp.length - index;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp.push(n);</span><br><span class=\"line\">    n %= m;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!n)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"模块化简介","date":"2016-05-02T08:21:59.000Z","_content":"# 现状\n\n伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。\n\n前端开发的和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。\n\n# 模块系统的演进\n\n模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。\n\n### &lt;script>标签\n\n```js\n<script src=\"module1.js\"></script>\n<script src=\"module2.js\"></script>\n<script src=\"libraryA.js\"></script>\n<script src=\"module3.js\"></script>\n```\n\n这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 `window` 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 [YUI](http://yuilibrary.com) 库。\n\n这种原始的加载方式暴露了一些显而易见的弊端：\n\n-  全局作用域下容易造成变量冲突\n-  文件只能按照 `<script>` 的书写顺序进行加载\n-  开发人员必须主观解决模块和代码库的依赖关系\n-  在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪\n\n### CommonJS\n\n服务器端的 Node.js 遵循 [CommonJS规范](http://wiki.commonjs.org/wiki/CommonJS)，该规范的核心思想是允许模块通过 `require` 方法来同步加载所要依赖的其他模块，然后通过 `exports` 或 `module.exports` 来导出需要暴露的接口。\n\n```js\nrequire(\"module\");\nrequire(\"../file.js\");\nexports.doStuff = function() {};\nmodule.exports = someValue;\n```\n\n优点：\n\n-  服务器端模块便于重用\n-  [NPM](https://www.npmjs.com) 中已经有将近20万个可以使用模块包\n-  简单并容易使用\n\n缺点：\n\n-  同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的\n-  不能非阻塞的并行加载多个模块\n\n实现：\n\n-  服务器端的 [Node.js](http://www.nodejs.org)\n-  [Browserify](http://browserify.org)，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大\n-  [modules-webmake](https://github.com/medikoo/modules-webmake)，类似Browserify，还不如 Browserify 灵活\n-  [wreq](https://github.com/substack/wreq)，Browserify 的前身\n\n### AMD\n\n[Asynchronous Module Definition](https://github.com/amdjs/amdjs-api) 规范其实只有一个主要接口 `define(id?, dependencies?, factory)`，它要在声明模块的时候指定所有的依赖 `dependencies`，并且还要当做形参传到 `factory` 中，对于依赖的模块提前执行，依赖前置。\n\n```js\ndefine(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) {\n  return someExportedValue;\n});\nrequire([\"module\", \"../file\"], function(module, file) { /* ... */ });\n```\n\n优点：\n\n-  适合在浏览器环境中异步加载模块\n-  可以并行加载多个模块\n\n缺点：\n\n-  提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅\n-  不符合通用的模块化思维方式，是一种妥协的实现\n\n实现：\n\n-  [RequireJS](http://requirejs.org)\n-  [curl](https://github.com/cujojs/curl)\n\n### CMD\n\n[Common Module Definition](https://github.com/cmdjs/specification/blob/master/draft/module.md) 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。\n\n```js\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n  var Spinning = require('./spinning');\n  exports.doSomething = ...\n  module.exports = ...\n})\n```\n\n优点：\n\n-  依赖就近，延迟执行\n-  可以很容易在 Node.js 中运行\n\n缺点：\n\n-  依赖 SPM 打包，模块的加载逻辑偏重\n\n实现：\n\n-  [Sea.js](http://seajs.org/)\n-  [coolie](https://github.com/cloudcome/coolie)\n\n### UMD\n\n[Universal Module Definition](https://github.com/umdjs/umd) 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。\n\n### ES6 模块\n\nEcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。[ES6 模块](http://es6.ruanyifeng.com/#docs/module)的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。\n\n```js\nimport \"jquery\";\nexport function doStuff() {}\nmodule \"localModule\" {}\n```\n\n优点：\n\n-  容易进行静态分析\n-  面向未来的 EcmaScript 标准\n\n缺点：\n\n-  原生浏览器端还没有实现该标准\n-  全新的命令字，新版的 Node.js才支持\n\n实现：\n\n-  [Babel](https://babeljs.io/)\n\n### 期望的模块系统\n\n可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。\n\n# 前端模块加载\n\n前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。\n\n模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。\n\n__分块传输__，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。\n\n要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。\n\n# 所有资源都是模块\n\n在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。\n\n如果他们都可以视作模块，并且都可以通过`require`的方式来加载，将带来优雅的开发体验，比如：\n\n```js\nrequire(\"./style.css\");\nrequire(\"./style.less\");\nrequire(\"./template.jade\");\nrequire(\"./image.png\");\n```\n\n那么如何做到让 `require` 能加载各种资源呢？\n\n# 静态分析\n\n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 `<style>` 标签中执行。Webpack 就是在这样的需求中应运而生。\n\n同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。\n\n那么接下来，让我们开始 Webpack 的神奇之旅吧。\n\n\n\n","source":"_posts/modulariztion-introduction.md","raw":"---\ntitle: 模块化简介\ndate: 2016-05-02 16:21:59\ntags:\n  模块化\n---\n# 现状\n\n伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。\n\n前端开发的和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。\n\n# 模块系统的演进\n\n模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。\n\n### &lt;script>标签\n\n```js\n<script src=\"module1.js\"></script>\n<script src=\"module2.js\"></script>\n<script src=\"libraryA.js\"></script>\n<script src=\"module3.js\"></script>\n```\n\n这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 `window` 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 [YUI](http://yuilibrary.com) 库。\n\n这种原始的加载方式暴露了一些显而易见的弊端：\n\n-  全局作用域下容易造成变量冲突\n-  文件只能按照 `<script>` 的书写顺序进行加载\n-  开发人员必须主观解决模块和代码库的依赖关系\n-  在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪\n\n### CommonJS\n\n服务器端的 Node.js 遵循 [CommonJS规范](http://wiki.commonjs.org/wiki/CommonJS)，该规范的核心思想是允许模块通过 `require` 方法来同步加载所要依赖的其他模块，然后通过 `exports` 或 `module.exports` 来导出需要暴露的接口。\n\n```js\nrequire(\"module\");\nrequire(\"../file.js\");\nexports.doStuff = function() {};\nmodule.exports = someValue;\n```\n\n优点：\n\n-  服务器端模块便于重用\n-  [NPM](https://www.npmjs.com) 中已经有将近20万个可以使用模块包\n-  简单并容易使用\n\n缺点：\n\n-  同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的\n-  不能非阻塞的并行加载多个模块\n\n实现：\n\n-  服务器端的 [Node.js](http://www.nodejs.org)\n-  [Browserify](http://browserify.org)，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大\n-  [modules-webmake](https://github.com/medikoo/modules-webmake)，类似Browserify，还不如 Browserify 灵活\n-  [wreq](https://github.com/substack/wreq)，Browserify 的前身\n\n### AMD\n\n[Asynchronous Module Definition](https://github.com/amdjs/amdjs-api) 规范其实只有一个主要接口 `define(id?, dependencies?, factory)`，它要在声明模块的时候指定所有的依赖 `dependencies`，并且还要当做形参传到 `factory` 中，对于依赖的模块提前执行，依赖前置。\n\n```js\ndefine(\"module\", [\"dep1\", \"dep2\"], function(d1, d2) {\n  return someExportedValue;\n});\nrequire([\"module\", \"../file\"], function(module, file) { /* ... */ });\n```\n\n优点：\n\n-  适合在浏览器环境中异步加载模块\n-  可以并行加载多个模块\n\n缺点：\n\n-  提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅\n-  不符合通用的模块化思维方式，是一种妥协的实现\n\n实现：\n\n-  [RequireJS](http://requirejs.org)\n-  [curl](https://github.com/cujojs/curl)\n\n### CMD\n\n[Common Module Definition](https://github.com/cmdjs/specification/blob/master/draft/module.md) 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。\n\n```js\ndefine(function(require, exports, module) {\n  var $ = require('jquery');\n  var Spinning = require('./spinning');\n  exports.doSomething = ...\n  module.exports = ...\n})\n```\n\n优点：\n\n-  依赖就近，延迟执行\n-  可以很容易在 Node.js 中运行\n\n缺点：\n\n-  依赖 SPM 打包，模块的加载逻辑偏重\n\n实现：\n\n-  [Sea.js](http://seajs.org/)\n-  [coolie](https://github.com/cloudcome/coolie)\n\n### UMD\n\n[Universal Module Definition](https://github.com/umdjs/umd) 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。\n\n### ES6 模块\n\nEcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。[ES6 模块](http://es6.ruanyifeng.com/#docs/module)的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。\n\n```js\nimport \"jquery\";\nexport function doStuff() {}\nmodule \"localModule\" {}\n```\n\n优点：\n\n-  容易进行静态分析\n-  面向未来的 EcmaScript 标准\n\n缺点：\n\n-  原生浏览器端还没有实现该标准\n-  全新的命令字，新版的 Node.js才支持\n\n实现：\n\n-  [Babel](https://babeljs.io/)\n\n### 期望的模块系统\n\n可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。\n\n# 前端模块加载\n\n前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。\n\n模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。\n\n__分块传输__，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。\n\n要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。\n\n# 所有资源都是模块\n\n在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。\n\n如果他们都可以视作模块，并且都可以通过`require`的方式来加载，将带来优雅的开发体验，比如：\n\n```js\nrequire(\"./style.css\");\nrequire(\"./style.less\");\nrequire(\"./template.jade\");\nrequire(\"./image.png\");\n```\n\n那么如何做到让 `require` 能加载各种资源呢？\n\n# 静态分析\n\n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 `<style>` 标签中执行。Webpack 就是在这样的需求中应运而生。\n\n同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。\n\n那么接下来，让我们开始 Webpack 的神奇之旅吧。\n\n\n\n","slug":"modulariztion-introduction","published":1,"updated":"2016-05-02T08:28:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyvr000au5i13qcxaxei","content":"<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p>\n<p>前端开发的和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p>\n<h1 id=\"模块系统的演进\"><a href=\"#模块系统的演进\" class=\"headerlink\" title=\"模块系统的演进\"></a>模块系统的演进</h1><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。</p>\n<h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a>&lt;script&gt;标签</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"module1.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module2.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"libraryA.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module3.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <a href=\"http://yuilibrary.com\" target=\"_blank\" rel=\"external\">YUI</a> 库。</p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：</p>\n<ul>\n<li>全局作用域下容易造成变量冲突</li>\n<li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载</li>\n<li>开发人员必须主观解决模块和代码库的依赖关系</li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>\n</ul>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>服务器端的 Node.js 遵循 <a href=\"http://wiki.commonjs.org/wiki/CommonJS\" target=\"_blank\" rel=\"external\">CommonJS规范</a>，该规范的核心思想是允许模块通过 <code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"../file.js\"</span>);</span><br><span class=\"line\">exports.doStuff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = someValue;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>服务器端模块便于重用</li>\n<li><a href=\"https://www.npmjs.com\" target=\"_blank\" rel=\"external\">NPM</a> 中已经有将近20万个可以使用模块包</li>\n<li>简单并容易使用</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>\n<li>不能非阻塞的并行加载多个模块</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>服务器端的 <a href=\"http://www.nodejs.org\" target=\"_blank\" rel=\"external\">Node.js</a></li>\n<li><a href=\"http://browserify.org\" target=\"_blank\" rel=\"external\">Browserify</a>，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大</li>\n<li><a href=\"https://github.com/medikoo/modules-webmake\" target=\"_blank\" rel=\"external\">modules-webmake</a>，类似Browserify，还不如 Browserify 灵活</li>\n<li><a href=\"https://github.com/substack/wreq\" target=\"_blank\" rel=\"external\">wreq</a>，Browserify 的前身</li>\n</ul>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p><a href=\"https://github.com/amdjs/amdjs-api\" target=\"_blank\" rel=\"external\">Asynchronous Module Definition</a> 规范其实只有一个主要接口 <code>define(id?, dependencies?, factory)</code>，它要在声明模块的时候指定所有的依赖 <code>dependencies</code>，并且还要当做形参传到 <code>factory</code> 中，对于依赖的模块提前执行，依赖前置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>, [<span class=\"string\">\"dep1\"</span>, <span class=\"string\">\"dep2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1, d2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> someExportedValue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>, <span class=\"string\">\"../file\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, file</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>适合在浏览器环境中异步加载模块</li>\n<li>可以并行加载多个模块</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li>\n<li>不符合通用的模块化思维方式，是一种妥协的实现</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://requirejs.org\" target=\"_blank\" rel=\"external\">RequireJS</a></li>\n<li><a href=\"https://github.com/cujojs/curl\" target=\"_blank\" rel=\"external\">curl</a></li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"external\">Common Module Definition</a> 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>);</span><br><span class=\"line\">  exports.doSomething = ...</span><br><span class=\"line\">  module.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>依赖就近，延迟执行</li>\n<li>可以很容易在 Node.js 中运行</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>依赖 SPM 打包，模块的加载逻辑偏重</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://seajs.org/\" target=\"_blank\" rel=\"external\">Sea.js</a></li>\n<li><a href=\"https://github.com/cloudcome/coolie\" target=\"_blank\" rel=\"external\">coolie</a></li>\n</ul>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p><a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"external\">Universal Module Definition</a> 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。</p>\n<h3 id=\"ES6-模块\"><a href=\"#ES6-模块\" class=\"headerlink\" title=\"ES6 模块\"></a>ES6 模块</h3><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。<a href=\"http://es6.ruanyifeng.com/#docs/module\" target=\"_blank\" rel=\"external\">ES6 模块</a>的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>容易进行静态分析</li>\n<li>面向未来的 EcmaScript 标准</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>原生浏览器端还没有实现该标准</li>\n<li>全新的命令字，新版的 Node.js才支持</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"https://babeljs.io/\" target=\"_blank\" rel=\"external\">Babel</a></li>\n</ul>\n<h3 id=\"期望的模块系统\"><a href=\"#期望的模块系统\" class=\"headerlink\" title=\"期望的模块系统\"></a>期望的模块系统</h3><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。</p>\n<h1 id=\"前端模块加载\"><a href=\"#前端模块加载\" class=\"headerlink\" title=\"前端模块加载\"></a>前端模块加载</h1><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。</p>\n<p>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。</p>\n<p><strong>分块传输</strong>，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。</p>\n<p>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。</p>\n<h1 id=\"所有资源都是模块\"><a href=\"#所有资源都是模块\" class=\"headerlink\" title=\"所有资源都是模块\"></a>所有资源都是模块</h1><p>在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。</p>\n<p>如果他们都可以视作模块，并且都可以通过<code>require</code>的方式来加载，将带来优雅的开发体验，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.css\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.less\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./template.jade\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.png\"</span>);</span><br></pre></td></tr></table></figure>\n<p>那么如何做到让 <code>require</code> 能加载各种资源呢？</p>\n<h1 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h1><p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。Webpack 就是在这样的需求中应运而生。</p>\n<p>同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。</p>\n<p>那么接下来，让我们开始 Webpack 的神奇之旅吧。</p>\n","excerpt":"","more":"<h1 id=\"现状\"><a href=\"#现状\" class=\"headerlink\" title=\"现状\"></a>现状</h1><p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p>\n<p>前端开发的和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p>\n<h1 id=\"模块系统的演进\"><a href=\"#模块系统的演进\" class=\"headerlink\" title=\"模块系统的演进\"></a>模块系统的演进</h1><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统。</p>\n<h3 id=\"lt-script-gt-标签\"><a href=\"#lt-script-gt-标签\" class=\"headerlink\" title=\"&lt;script&gt;标签\"></a>&lt;script&gt;标签</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"module1.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module2.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"libraryA.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"module3.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <a href=\"http://yuilibrary.com\">YUI</a> 库。</p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：</p>\n<ul>\n<li>全局作用域下容易造成变量冲突</li>\n<li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载</li>\n<li>开发人员必须主观解决模块和代码库的依赖关系</li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>\n</ul>\n<h3 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h3><p>服务器端的 Node.js 遵循 <a href=\"http://wiki.commonjs.org/wiki/CommonJS\">CommonJS规范</a>，该规范的核心思想是允许模块通过 <code>require</code> 方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"module\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"../file.js\"</span>);</span><br><span class=\"line\">exports.doStuff = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = someValue;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>服务器端模块便于重用</li>\n<li><a href=\"https://www.npmjs.com\">NPM</a> 中已经有将近20万个可以使用模块包</li>\n<li>简单并容易使用</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>\n<li>不能非阻塞的并行加载多个模块</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>服务器端的 <a href=\"http://www.nodejs.org\">Node.js</a></li>\n<li><a href=\"http://browserify.org\">Browserify</a>，浏览器端的 CommonJS 实现，可以使用 NPM 的模块，但是编译打包后的文件体积可能很大</li>\n<li><a href=\"https://github.com/medikoo/modules-webmake\">modules-webmake</a>，类似Browserify，还不如 Browserify 灵活</li>\n<li><a href=\"https://github.com/substack/wreq\">wreq</a>，Browserify 的前身</li>\n</ul>\n<h3 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h3><p><a href=\"https://github.com/amdjs/amdjs-api\">Asynchronous Module Definition</a> 规范其实只有一个主要接口 <code>define(id?, dependencies?, factory)</code>，它要在声明模块的时候指定所有的依赖 <code>dependencies</code>，并且还要当做形参传到 <code>factory</code> 中，对于依赖的模块提前执行，依赖前置。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"string\">\"module\"</span>, [<span class=\"string\">\"dep1\"</span>, <span class=\"string\">\"dep2\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d1, d2</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> someExportedValue;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"module\"</span>, <span class=\"string\">\"../file\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, file</span>) </span>&#123; <span class=\"comment\">/* ... */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>适合在浏览器环境中异步加载模块</li>\n<li>可以并行加载多个模块</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义不顺畅</li>\n<li>不符合通用的模块化思维方式，是一种妥协的实现</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://requirejs.org\">RequireJS</a></li>\n<li><a href=\"https://github.com/cujojs/curl\">curl</a></li>\n</ul>\n<h3 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h3><p><a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">Common Module Definition</a> 规范和 AMD 很相似，尽量保持简单，并与 CommonJS 和 Node.js 的 Modules 规范保持了很大的兼容性。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> $ = <span class=\"built_in\">require</span>(<span class=\"string\">'jquery'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> Spinning = <span class=\"built_in\">require</span>(<span class=\"string\">'./spinning'</span>);</span><br><span class=\"line\">  exports.doSomething = ...</span><br><span class=\"line\">  module.exports = ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>依赖就近，延迟执行</li>\n<li>可以很容易在 Node.js 中运行</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>依赖 SPM 打包，模块的加载逻辑偏重</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"http://seajs.org/\">Sea.js</a></li>\n<li><a href=\"https://github.com/cloudcome/coolie\">coolie</a></li>\n</ul>\n<h3 id=\"UMD\"><a href=\"#UMD\" class=\"headerlink\" title=\"UMD\"></a>UMD</h3><p><a href=\"https://github.com/umdjs/umd\">Universal Module Definition</a> 规范类似于兼容 CommonJS 和 AMD 的语法糖，是模块定义的跨平台解决方案。</p>\n<h3 id=\"ES6-模块\"><a href=\"#ES6-模块\" class=\"headerlink\" title=\"ES6 模块\"></a>ES6 模块</h3><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。<a href=\"http://es6.ruanyifeng.com/#docs/module\">ES6 模块</a>的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：</p>\n<ul>\n<li>容易进行静态分析</li>\n<li>面向未来的 EcmaScript 标准</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>原生浏览器端还没有实现该标准</li>\n<li>全新的命令字，新版的 Node.js才支持</li>\n</ul>\n<p>实现：</p>\n<ul>\n<li><a href=\"https://babeljs.io/\">Babel</a></li>\n</ul>\n<h3 id=\"期望的模块系统\"><a href=\"#期望的模块系统\" class=\"headerlink\" title=\"期望的模块系统\"></a>期望的模块系统</h3><p>可以兼容多种模块风格，尽量可以利用已有的代码，不仅仅只是 JavaScript 模块化，还有 CSS、图片、字体等资源也需要模块化。</p>\n<h1 id=\"前端模块加载\"><a href=\"#前端模块加载\" class=\"headerlink\" title=\"前端模块加载\"></a>前端模块加载</h1><p>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中。</p>\n<p>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴。</p>\n<p><strong>分块传输</strong>，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案。</p>\n<p>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过程。</p>\n<h1 id=\"所有资源都是模块\"><a href=\"#所有资源都是模块\" class=\"headerlink\" title=\"所有资源都是模块\"></a>所有资源都是模块</h1><p>在上面的分析过程中，我们提到的模块仅仅是指JavaScript模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。</p>\n<p>如果他们都可以视作模块，并且都可以通过<code>require</code>的方式来加载，将带来优雅的开发体验，比如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.css\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./style.less\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./template.jade\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">\"./image.png\"</span>);</span><br></pre></td></tr></table></figure>\n<p>那么如何做到让 <code>require</code> 能加载各种资源呢？</p>\n<h1 id=\"静态分析\"><a href=\"#静态分析\" class=\"headerlink\" title=\"静态分析\"></a>静态分析</h1><p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。Webpack 就是在这样的需求中应运而生。</p>\n<p>同时，为了能利用已经存在的各种框架、库和已经写好的文件，我们还需要一个模块加载的兼容策略，来避免重写所有的模块。</p>\n<p>那么接下来，让我们开始 Webpack 的神奇之旅吧。</p>\n"},{"title":"Node基础篇（文件操作）","date":"2016-05-02T08:21:24.000Z","_content":"## 文件操作\n\n### 相关模块\n\nNode内核提供了很多与文件操作相关的模块，每个模块都提供了一些最基本的操作API，在NPM中也有社区提供的功能包\n\n##### fs：\n\n基础的文件操作 API\n\n##### path：\n\n提供和路径相关的操作 API\n\n##### readline：\n\n用于读取大文本文件，一行一行读\n\n##### fs-extra（第三方）：\n\nhttps://www.npmjs.com/package/fs-extra\n\n\n\n### 同步或异步调用\n\n- fs模块对文件的几乎所有操作都有同步和异步两种形式\n- 例如：readFile() 和 readFileSync()\n- 区别：\n  + 同步调用会阻塞代码的执行，异步则不会\n  + 异步调用会将读取任务下达到任务队列，直到任务执行完成才会回调\n  + 异常处理方面，同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数\n\n\n\n### 路径模块\n\n在文件操作的过程中，都必须使用物理路径（绝对路径），path模块提供了一系列与路径相关的 API\n\n```javascript\nconsole.log('join用于拼接多个路径部分，并转化为正常格式');\nconst temp = path.join(__dirname, '..', 'lyrics', './友谊之光.lrc');\nconsole.log(temp);\n\nconsole.log('获取路径中的文件名');\nconsole.log(path.basename(temp));\n\nconsole.log('获取路径中的文件名并排除扩展名');\nconsole.log(path.basename(temp, '.lrc'));\n\nconsole.log('====================================');\n\nconsole.log('获取不同操作系统的路径分隔符');\nconsole.log(process.platform + '的分隔符为 ' + path.delimiter);\n\nconsole.log('一般用于分割环境变量');\nconsole.log(process.env.PATH.split(path.delimiter));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径中的目录部分');\nconsole.log(path.dirname(temp));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径中最后的扩展名');\nconsole.log(path.extname(temp));\n\nconsole.log('====================================');\n\nconsole.log('将一个路径解析成一个对象的形式');\nconst pathObject = path.parse(temp);\nconsole.log(pathObject);\n\nconsole.log('====================================');\n\nconsole.log('将一个路径对象再转换为一个字符串的形式');\n// pathObject.name = '我终于失去了你';\npathObject.base = '我终于失去了你.lrc';\nconsole.log(pathObject);\n\nconsole.log(path.format(pathObject));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径是不是绝对路径');\nconsole.log(path.isAbsolute(temp));\nconsole.log(path.isAbsolute('../lyrics/爱的代价.lrc'));\n\nconsole.log('====================================');\n\nconsole.log('将一个路径转换为当前系统默认的标准格式，并解析其中的./和../');\nconsole.log(path.normalize('c:/develop/demo\\\\hello/../world/./a.txt'));\n\nconsole.log('====================================');\n\nconsole.log('获取第二个路径相对第一个路径的相对路径');\nconsole.log(path.relative(__dirname, temp));\n\nconsole.log('====================================');\n\nconsole.log('以类似命令行cd命令的方式拼接路径');\nconsole.log(path.resolve(temp, 'c:/', './develop', '../application'));\n\nconsole.log('====================================');\n\nconsole.log('获取不同平台中路径的分隔符（默认）');\nconsole.log(path.sep);\n\nconsole.log('====================================');\n\nconsole.log('允许在任意平台下以WIN32的方法调用PATH对象');\n// console.log(path.win32);\nconsole.log(path === path.win32);\n\nconsole.log('====================================');\n\nconsole.log('允许在任意平台下以POSIX的方法调用PATH对象');\nconsole.log(path === path.posix);\n```\n\n源码地址：\nhttps://github.com/nodejs/node/blob/master/lib/path.js\n\n\n\n### 文件读取\n\nNode中文件读取的方式主要有：\n\n#### fs.readFile(file[, options], callback(error, data))\n\n```javascript\nfs.readFile('c:\\\\demo\\1.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### fs.readFileSync(file[, options])\n\n```javascript\ntry {\n  const data = fs.readFileSync('c:\\\\demo\\1.txt', 'utf8');\n  console.log(data);\n} catch(e) {\n  // 文件不存在，或者权限错误\n  throw e;\n}\n```\n\n#### fs.createReadStream(path[, options])\n\n```javascript\nconst stream = fs.createReadStream('c:\\\\demo\\1.txt');\nlet data = ''\nstream.on('data', (trunk) => {\n  data += trunk;\n});\nstream.on('end', () => {\n  console.log(data);\n});\n```\n\n> *由于Windows平台下默认文件编码是GBK，在Node中不支持，可以通过[iconv-lite](https://github.com/ashtuchkin/iconv-lite)解决*\n\n\n### Readline模块逐行读取文本内容\n\n```javascript\nconst readline = require('readline');\nconst fs = require('fs');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt')\n});\n\nrl.on('line', (line) => {\n  console.log('Line from file:', line);\n});\n```\n\n\n### 文件写入\n\nNode中文件写入的方式主要有：\n\n#### fs.writeFile(file, data[, options], callback(error))\n\n```javascript\nfs.writeFile('c:\\\\demo\\a.txt', new Date(), (error) => {\n  console.log(error);\n});\n```\n\n#### fs.writeFileSync(file, data[, options])\n\n```javascript\ntry {\n  fs.writeFileSync('c:\\\\demo\\a.txt', new Date());\n} catch (error) {\n  // 文件夹不存在，或者权限错误\n  console.log(error);\n}\n```\n\n#### fs.createWriteStream(path[,option])\n\n```javascript\nvar streamWriter = fs.createWriteStream('c:\\\\demo\\a.txt');\nsetInterval(() => {\n  streamWriter.write(`${new Date}\\n`, (error) => {\n    console.log(error);\n  });\n}, 1000);\n```\n\n\n### 文件写入\n\n\n#### fs.appendFile(file,data[,options],callback(err))\n\n```javascript\n// 相比较之前文件流的方式，这种方式不会占用文件资源，append完成就会释放\nsetInterval(() => {\n  fs.appendFile('c:\\\\demo\\a.txt',`${new Date}\\n`, (error) => {\n    console.log(error);\n  });\n}, 1000);\n```\n\n#### fs.appendFileSync(file,data[,options])\n\n```javascript\nsetInterval(() => {\n  fs.appendFileSync('c:\\\\demo\\a.txt',`${new Date}\\n`);\n}, 1000);\n```\n\n\n### 其他常见文件操作\n\n#### 验证路径是否存在（过时的API）\n\n- fs.exists(path,callback(exists))\n- fs.existsSync(path) // => 返回布尔类型 exists\n\n#### 获取文件信息\n\n- fs.stat(path,callback(err,stats))\n- fs.statSync(path) // => 返回一个fs.Stats实例\n\n#### 移动文件或重命名文件或目录\n\n> 与命令行相同，重命名操作也可以实现文件移动\n\n- fs.rename(oldPath,newPath,callback)\n- fs.renameSync(oldPath,newPath)\n\n#### 删除文件\n\n- fs.unlink(path,callback(err))\n- fs.unlinkSync(path)\n\n\n\n### 其他常见文件夹操作\n\n#### 创建一个目录\n\n- fs.mkdir(path[,model],callback)\n- fs.mkdirSync(path[,model])\n\n#### 删除一个空目录\n\n- fs.rmdir(path,callback)\n- fs.rmdirSync(path)\n\n#### 读取一个目录\n\n- fs.readdir(path,callback(err,files))\n- fs.readdirSync(path) // => 返回files\n\n\n\n### 文件监视\n\n#### 利用文件监视实现自动 markdown 文件转换\n\n- 相关链接：\n\n  1. https://github.com/chjj/marked\n  2. https://github.com/Browsersync/browser-sync\n\n- 实现思路：\n  1. 利用`fs`模块的文件监视功能监视指定MD文件\n  2. 当文件发生变化后，借助`marked`包提供的`markdown` to `html`功能将改变后的MD文件转换为HTML\n  3. 再将得到的HTML替换到模版中\n  4. 最后利用BrowserSync模块实现浏览器自动刷新\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nvar marked = require('marked');\nvar bs = require('browser-sync').create();\n\n\nvar target = path.join(__dirname, process.argv[2] || './README.md');\nvar filename = path.basename(target, path.extname(target)) + '.html';\nvar targetHtml = path.join(path.dirname(target), filename);\n\nbs.init({\n  server: path.dirname(target),\n  index: filename,\n  notify: false\n});\n\nbs.reload(filename);\n\nvar template = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <style>{{{styles}}}</style>\n</head>\n<body>\n  <article class=\"markdown\">\n    {{{body}}}\n  </article>\n</body>\n</html>\n`;\n\nfs.readFile(path.join(__dirname, './markdown.css'), 'utf8', (error, css) => {\n  if (error) throw error;\n  template = template.replace('{{{styles}}}', css);\n  var handler = (current, previous) => {\n    fs.readFile(target, 'utf8', (error, content) => {\n      var html = template.replace('{{{body}}}', marked(content));\n      fs.writeFile(targetHtml, html, (error) => {\n        if (!error) {\n          console.log(`updated@${new Date()}`);\n          bs.reload(filename);\n        }\n      });\n    });\n  };\n  handler();\n  fs.watchFile(target, { interval: 100 }, handler);\n});\n```\n\n\n*****\n\n## 缓冲区处理\n\n### 什么是缓冲区\n\n- 缓冲区就是内存中操作数据的容器\n- 只是数据容器而已\n- 通过缓冲区可以很方便的操作二进制数据\n- 而且在大文件操作时必须有缓冲区\n\n\n### 为什么要有缓冲区\n\n- JavaScript是比较擅长处理字符串，但是早期的应用场景主要用于处理HTML文档，不会有太大篇幅的数据处理，也不会接触到二进制的数据。\n- 而在Node中操作数据、网络通信是没办法完全以字符串的方式操作的，简单来说\n- 所以在Node中引入了一个二进制的缓冲区的实现：Buffer\n","source":"_posts/node-essential-file-system.md","raw":"---\ntitle: Node基础篇（文件操作）\ndate: 2016-05-02 16:21:24\ntags:\n  Node\n---\n## 文件操作\n\n### 相关模块\n\nNode内核提供了很多与文件操作相关的模块，每个模块都提供了一些最基本的操作API，在NPM中也有社区提供的功能包\n\n##### fs：\n\n基础的文件操作 API\n\n##### path：\n\n提供和路径相关的操作 API\n\n##### readline：\n\n用于读取大文本文件，一行一行读\n\n##### fs-extra（第三方）：\n\nhttps://www.npmjs.com/package/fs-extra\n\n\n\n### 同步或异步调用\n\n- fs模块对文件的几乎所有操作都有同步和异步两种形式\n- 例如：readFile() 和 readFileSync()\n- 区别：\n  + 同步调用会阻塞代码的执行，异步则不会\n  + 异步调用会将读取任务下达到任务队列，直到任务执行完成才会回调\n  + 异常处理方面，同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数\n\n\n\n### 路径模块\n\n在文件操作的过程中，都必须使用物理路径（绝对路径），path模块提供了一系列与路径相关的 API\n\n```javascript\nconsole.log('join用于拼接多个路径部分，并转化为正常格式');\nconst temp = path.join(__dirname, '..', 'lyrics', './友谊之光.lrc');\nconsole.log(temp);\n\nconsole.log('获取路径中的文件名');\nconsole.log(path.basename(temp));\n\nconsole.log('获取路径中的文件名并排除扩展名');\nconsole.log(path.basename(temp, '.lrc'));\n\nconsole.log('====================================');\n\nconsole.log('获取不同操作系统的路径分隔符');\nconsole.log(process.platform + '的分隔符为 ' + path.delimiter);\n\nconsole.log('一般用于分割环境变量');\nconsole.log(process.env.PATH.split(path.delimiter));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径中的目录部分');\nconsole.log(path.dirname(temp));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径中最后的扩展名');\nconsole.log(path.extname(temp));\n\nconsole.log('====================================');\n\nconsole.log('将一个路径解析成一个对象的形式');\nconst pathObject = path.parse(temp);\nconsole.log(pathObject);\n\nconsole.log('====================================');\n\nconsole.log('将一个路径对象再转换为一个字符串的形式');\n// pathObject.name = '我终于失去了你';\npathObject.base = '我终于失去了你.lrc';\nconsole.log(pathObject);\n\nconsole.log(path.format(pathObject));\n\nconsole.log('====================================');\n\nconsole.log('获取一个路径是不是绝对路径');\nconsole.log(path.isAbsolute(temp));\nconsole.log(path.isAbsolute('../lyrics/爱的代价.lrc'));\n\nconsole.log('====================================');\n\nconsole.log('将一个路径转换为当前系统默认的标准格式，并解析其中的./和../');\nconsole.log(path.normalize('c:/develop/demo\\\\hello/../world/./a.txt'));\n\nconsole.log('====================================');\n\nconsole.log('获取第二个路径相对第一个路径的相对路径');\nconsole.log(path.relative(__dirname, temp));\n\nconsole.log('====================================');\n\nconsole.log('以类似命令行cd命令的方式拼接路径');\nconsole.log(path.resolve(temp, 'c:/', './develop', '../application'));\n\nconsole.log('====================================');\n\nconsole.log('获取不同平台中路径的分隔符（默认）');\nconsole.log(path.sep);\n\nconsole.log('====================================');\n\nconsole.log('允许在任意平台下以WIN32的方法调用PATH对象');\n// console.log(path.win32);\nconsole.log(path === path.win32);\n\nconsole.log('====================================');\n\nconsole.log('允许在任意平台下以POSIX的方法调用PATH对象');\nconsole.log(path === path.posix);\n```\n\n源码地址：\nhttps://github.com/nodejs/node/blob/master/lib/path.js\n\n\n\n### 文件读取\n\nNode中文件读取的方式主要有：\n\n#### fs.readFile(file[, options], callback(error, data))\n\n```javascript\nfs.readFile('c:\\\\demo\\1.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n\n#### fs.readFileSync(file[, options])\n\n```javascript\ntry {\n  const data = fs.readFileSync('c:\\\\demo\\1.txt', 'utf8');\n  console.log(data);\n} catch(e) {\n  // 文件不存在，或者权限错误\n  throw e;\n}\n```\n\n#### fs.createReadStream(path[, options])\n\n```javascript\nconst stream = fs.createReadStream('c:\\\\demo\\1.txt');\nlet data = ''\nstream.on('data', (trunk) => {\n  data += trunk;\n});\nstream.on('end', () => {\n  console.log(data);\n});\n```\n\n> *由于Windows平台下默认文件编码是GBK，在Node中不支持，可以通过[iconv-lite](https://github.com/ashtuchkin/iconv-lite)解决*\n\n\n### Readline模块逐行读取文本内容\n\n```javascript\nconst readline = require('readline');\nconst fs = require('fs');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('sample.txt')\n});\n\nrl.on('line', (line) => {\n  console.log('Line from file:', line);\n});\n```\n\n\n### 文件写入\n\nNode中文件写入的方式主要有：\n\n#### fs.writeFile(file, data[, options], callback(error))\n\n```javascript\nfs.writeFile('c:\\\\demo\\a.txt', new Date(), (error) => {\n  console.log(error);\n});\n```\n\n#### fs.writeFileSync(file, data[, options])\n\n```javascript\ntry {\n  fs.writeFileSync('c:\\\\demo\\a.txt', new Date());\n} catch (error) {\n  // 文件夹不存在，或者权限错误\n  console.log(error);\n}\n```\n\n#### fs.createWriteStream(path[,option])\n\n```javascript\nvar streamWriter = fs.createWriteStream('c:\\\\demo\\a.txt');\nsetInterval(() => {\n  streamWriter.write(`${new Date}\\n`, (error) => {\n    console.log(error);\n  });\n}, 1000);\n```\n\n\n### 文件写入\n\n\n#### fs.appendFile(file,data[,options],callback(err))\n\n```javascript\n// 相比较之前文件流的方式，这种方式不会占用文件资源，append完成就会释放\nsetInterval(() => {\n  fs.appendFile('c:\\\\demo\\a.txt',`${new Date}\\n`, (error) => {\n    console.log(error);\n  });\n}, 1000);\n```\n\n#### fs.appendFileSync(file,data[,options])\n\n```javascript\nsetInterval(() => {\n  fs.appendFileSync('c:\\\\demo\\a.txt',`${new Date}\\n`);\n}, 1000);\n```\n\n\n### 其他常见文件操作\n\n#### 验证路径是否存在（过时的API）\n\n- fs.exists(path,callback(exists))\n- fs.existsSync(path) // => 返回布尔类型 exists\n\n#### 获取文件信息\n\n- fs.stat(path,callback(err,stats))\n- fs.statSync(path) // => 返回一个fs.Stats实例\n\n#### 移动文件或重命名文件或目录\n\n> 与命令行相同，重命名操作也可以实现文件移动\n\n- fs.rename(oldPath,newPath,callback)\n- fs.renameSync(oldPath,newPath)\n\n#### 删除文件\n\n- fs.unlink(path,callback(err))\n- fs.unlinkSync(path)\n\n\n\n### 其他常见文件夹操作\n\n#### 创建一个目录\n\n- fs.mkdir(path[,model],callback)\n- fs.mkdirSync(path[,model])\n\n#### 删除一个空目录\n\n- fs.rmdir(path,callback)\n- fs.rmdirSync(path)\n\n#### 读取一个目录\n\n- fs.readdir(path,callback(err,files))\n- fs.readdirSync(path) // => 返回files\n\n\n\n### 文件监视\n\n#### 利用文件监视实现自动 markdown 文件转换\n\n- 相关链接：\n\n  1. https://github.com/chjj/marked\n  2. https://github.com/Browsersync/browser-sync\n\n- 实现思路：\n  1. 利用`fs`模块的文件监视功能监视指定MD文件\n  2. 当文件发生变化后，借助`marked`包提供的`markdown` to `html`功能将改变后的MD文件转换为HTML\n  3. 再将得到的HTML替换到模版中\n  4. 最后利用BrowserSync模块实现浏览器自动刷新\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nvar marked = require('marked');\nvar bs = require('browser-sync').create();\n\n\nvar target = path.join(__dirname, process.argv[2] || './README.md');\nvar filename = path.basename(target, path.extname(target)) + '.html';\nvar targetHtml = path.join(path.dirname(target), filename);\n\nbs.init({\n  server: path.dirname(target),\n  index: filename,\n  notify: false\n});\n\nbs.reload(filename);\n\nvar template = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title></title>\n  <style>{{{styles}}}</style>\n</head>\n<body>\n  <article class=\"markdown\">\n    {{{body}}}\n  </article>\n</body>\n</html>\n`;\n\nfs.readFile(path.join(__dirname, './markdown.css'), 'utf8', (error, css) => {\n  if (error) throw error;\n  template = template.replace('{{{styles}}}', css);\n  var handler = (current, previous) => {\n    fs.readFile(target, 'utf8', (error, content) => {\n      var html = template.replace('{{{body}}}', marked(content));\n      fs.writeFile(targetHtml, html, (error) => {\n        if (!error) {\n          console.log(`updated@${new Date()}`);\n          bs.reload(filename);\n        }\n      });\n    });\n  };\n  handler();\n  fs.watchFile(target, { interval: 100 }, handler);\n});\n```\n\n\n*****\n\n## 缓冲区处理\n\n### 什么是缓冲区\n\n- 缓冲区就是内存中操作数据的容器\n- 只是数据容器而已\n- 通过缓冲区可以很方便的操作二进制数据\n- 而且在大文件操作时必须有缓冲区\n\n\n### 为什么要有缓冲区\n\n- JavaScript是比较擅长处理字符串，但是早期的应用场景主要用于处理HTML文档，不会有太大篇幅的数据处理，也不会接触到二进制的数据。\n- 而在Node中操作数据、网络通信是没办法完全以字符串的方式操作的，简单来说\n- 所以在Node中引入了一个二进制的缓冲区的实现：Buffer\n","slug":"node-essential-file-system","published":1,"updated":"2016-05-02T08:29:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyvv000cu5i11vxr52tv","content":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"相关模块\"><a href=\"#相关模块\" class=\"headerlink\" title=\"相关模块\"></a>相关模块</h3><p>Node内核提供了很多与文件操作相关的模块，每个模块都提供了一些最基本的操作API，在NPM中也有社区提供的功能包</p>\n<h5 id=\"fs：\"><a href=\"#fs：\" class=\"headerlink\" title=\"fs：\"></a>fs：</h5><p>基础的文件操作 API</p>\n<h5 id=\"path：\"><a href=\"#path：\" class=\"headerlink\" title=\"path：\"></a>path：</h5><p>提供和路径相关的操作 API</p>\n<h5 id=\"readline：\"><a href=\"#readline：\" class=\"headerlink\" title=\"readline：\"></a>readline：</h5><p>用于读取大文本文件，一行一行读</p>\n<h5 id=\"fs-extra（第三方）：\"><a href=\"#fs-extra（第三方）：\" class=\"headerlink\" title=\"fs-extra（第三方）：\"></a>fs-extra（第三方）：</h5><p><a href=\"https://www.npmjs.com/package/fs-extra\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/fs-extra</a></p>\n<h3 id=\"同步或异步调用\"><a href=\"#同步或异步调用\" class=\"headerlink\" title=\"同步或异步调用\"></a>同步或异步调用</h3><ul>\n<li>fs模块对文件的几乎所有操作都有同步和异步两种形式</li>\n<li>例如：readFile() 和 readFileSync()</li>\n<li>区别：<ul>\n<li>同步调用会阻塞代码的执行，异步则不会</li>\n<li>异步调用会将读取任务下达到任务队列，直到任务执行完成才会回调</li>\n<li>异常处理方面，同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"路径模块\"><a href=\"#路径模块\" class=\"headerlink\" title=\"路径模块\"></a>路径模块</h3><p>在文件操作的过程中，都必须使用物理路径（绝对路径），path模块提供了一系列与路径相关的 API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'join用于拼接多个路径部分，并转化为正常格式'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> temp = path.join(__dirname, <span class=\"string\">'..'</span>, <span class=\"string\">'lyrics'</span>, <span class=\"string\">'./友谊之光.lrc'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取路径中的文件名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.basename(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取路径中的文件名并排除扩展名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.basename(temp, <span class=\"string\">'.lrc'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取不同操作系统的路径分隔符'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.platform + <span class=\"string\">'的分隔符为 '</span> + path.delimiter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'一般用于分割环境变量'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.env.PATH.split(path.delimiter));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径中的目录部分'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.dirname(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径中最后的扩展名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.extname(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径解析成一个对象的形式'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pathObject = path.parse(temp);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pathObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径对象再转换为一个字符串的形式'</span>);</span><br><span class=\"line\"><span class=\"comment\">// pathObject.name = '我终于失去了你';</span></span><br><span class=\"line\">pathObject.base = <span class=\"string\">'我终于失去了你.lrc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pathObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.format(pathObject));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径是不是绝对路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.isAbsolute(temp));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.isAbsolute(<span class=\"string\">'../lyrics/爱的代价.lrc'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径转换为当前系统默认的标准格式，并解析其中的./和../'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.normalize(<span class=\"string\">'c:/develop/demo\\\\hello/../world/./a.txt'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取第二个路径相对第一个路径的相对路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.relative(__dirname, temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'以类似命令行cd命令的方式拼接路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(temp, <span class=\"string\">'c:/'</span>, <span class=\"string\">'./develop'</span>, <span class=\"string\">'../application'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取不同平台中路径的分隔符（默认）'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.sep);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'允许在任意平台下以WIN32的方法调用PATH对象'</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(path.win32);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path === path.win32);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'允许在任意平台下以POSIX的方法调用PATH对象'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path === path.posix);</span><br></pre></td></tr></table></figure>\n<p>源码地址：<br><a href=\"https://github.com/nodejs/node/blob/master/lib/path.js\" target=\"_blank\" rel=\"external\">https://github.com/nodejs/node/blob/master/lib/path.js</a></p>\n<h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>Node中文件读取的方式主要有：</p>\n<h4 id=\"fs-readFile-file-options-callback-error-data\"><a href=\"#fs-readFile-file-options-callback-error-data\" class=\"headerlink\" title=\"fs.readFile(file[, options], callback(error, data))\"></a>fs.readFile(file[, options], callback(error, data))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'c:\\\\demo\\1.txt'</span>, <span class=\"string\">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-readFileSync-file-options\"><a href=\"#fs-readFileSync-file-options\" class=\"headerlink\" title=\"fs.readFileSync(file[, options])\"></a>fs.readFileSync(file[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">'c:\\\\demo\\1.txt'</span>, <span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 文件不存在，或者权限错误</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-createReadStream-path-options\"><a href=\"#fs-createReadStream-path-options\" class=\"headerlink\" title=\"fs.createReadStream(path[, options])\"></a>fs.createReadStream(path[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'c:\\\\demo\\1.txt'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"string\">''</span></span><br><span class=\"line\">stream.on(<span class=\"string\">'data'</span>, (trunk) =&gt; &#123;</span><br><span class=\"line\">  data += trunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">stream.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><em>由于Windows平台下默认文件编码是GBK，在Node中不支持，可以通过<a href=\"https://github.com/ashtuchkin/iconv-lite\" target=\"_blank\" rel=\"external\">iconv-lite</a>解决</em></p>\n</blockquote>\n<h3 id=\"Readline模块逐行读取文本内容\"><a href=\"#Readline模块逐行读取文本内容\" class=\"headerlink\" title=\"Readline模块逐行读取文本内容\"></a>Readline模块逐行读取文本内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> readline = <span class=\"built_in\">require</span>(<span class=\"string\">'readline'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rl = readline.createInterface(&#123;</span><br><span class=\"line\">  input: fs.createReadStream(<span class=\"string\">'sample.txt'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rl.on(<span class=\"string\">'line'</span>, (line) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Line from file:'</span>, line);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h3><p>Node中文件写入的方式主要有：</p>\n<h4 id=\"fs-writeFile-file-data-options-callback-error\"><a href=\"#fs-writeFile-file-data-options-callback-error\" class=\"headerlink\" title=\"fs.writeFile(file, data[, options], callback(error))\"></a>fs.writeFile(file, data[, options], callback(error))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile(<span class=\"string\">'c:\\\\demo\\a.txt'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-writeFileSync-file-data-options\"><a href=\"#fs-writeFileSync-file-data-options\" class=\"headerlink\" title=\"fs.writeFileSync(file, data[, options])\"></a>fs.writeFileSync(file, data[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'c:\\\\demo\\a.txt'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 文件夹不存在，或者权限错误</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-createWriteStream-path-option\"><a href=\"#fs-createWriteStream-path-option\" class=\"headerlink\" title=\"fs.createWriteStream(path[,option])\"></a>fs.createWriteStream(path[,option])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> streamWriter = fs.createWriteStream(<span class=\"string\">'c:\\\\demo\\a.txt'</span>);</span><br><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  streamWriter.write(<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>, (error) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件写入-1\"><a href=\"#文件写入-1\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h3><h4 id=\"fs-appendFile-file-data-options-callback-err\"><a href=\"#fs-appendFile-file-data-options-callback-err\" class=\"headerlink\" title=\"fs.appendFile(file,data[,options],callback(err))\"></a>fs.appendFile(file,data[,options],callback(err))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相比较之前文件流的方式，这种方式不会占用文件资源，append完成就会释放</span></span><br><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  fs.appendFile(<span class=\"string\">'c:\\\\demo\\a.txt'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>, (error) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-appendFileSync-file-data-options\"><a href=\"#fs-appendFileSync-file-data-options\" class=\"headerlink\" title=\"fs.appendFileSync(file,data[,options])\"></a>fs.appendFileSync(file,data[,options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  fs.appendFileSync(<span class=\"string\">'c:\\\\demo\\a.txt'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他常见文件操作\"><a href=\"#其他常见文件操作\" class=\"headerlink\" title=\"其他常见文件操作\"></a>其他常见文件操作</h3><h4 id=\"验证路径是否存在（过时的API）\"><a href=\"#验证路径是否存在（过时的API）\" class=\"headerlink\" title=\"验证路径是否存在（过时的API）\"></a>验证路径是否存在（过时的API）</h4><ul>\n<li>fs.exists(path,callback(exists))</li>\n<li>fs.existsSync(path) // =&gt; 返回布尔类型 exists</li>\n</ul>\n<h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><ul>\n<li>fs.stat(path,callback(err,stats))</li>\n<li>fs.statSync(path) // =&gt; 返回一个fs.Stats实例</li>\n</ul>\n<h4 id=\"移动文件或重命名文件或目录\"><a href=\"#移动文件或重命名文件或目录\" class=\"headerlink\" title=\"移动文件或重命名文件或目录\"></a>移动文件或重命名文件或目录</h4><blockquote>\n<p>与命令行相同，重命名操作也可以实现文件移动</p>\n</blockquote>\n<ul>\n<li>fs.rename(oldPath,newPath,callback)</li>\n<li>fs.renameSync(oldPath,newPath)</li>\n</ul>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><ul>\n<li>fs.unlink(path,callback(err))</li>\n<li>fs.unlinkSync(path)</li>\n</ul>\n<h3 id=\"其他常见文件夹操作\"><a href=\"#其他常见文件夹操作\" class=\"headerlink\" title=\"其他常见文件夹操作\"></a>其他常见文件夹操作</h3><h4 id=\"创建一个目录\"><a href=\"#创建一个目录\" class=\"headerlink\" title=\"创建一个目录\"></a>创建一个目录</h4><ul>\n<li>fs.mkdir(path[,model],callback)</li>\n<li>fs.mkdirSync(path[,model])</li>\n</ul>\n<h4 id=\"删除一个空目录\"><a href=\"#删除一个空目录\" class=\"headerlink\" title=\"删除一个空目录\"></a>删除一个空目录</h4><ul>\n<li>fs.rmdir(path,callback)</li>\n<li>fs.rmdirSync(path)</li>\n</ul>\n<h4 id=\"读取一个目录\"><a href=\"#读取一个目录\" class=\"headerlink\" title=\"读取一个目录\"></a>读取一个目录</h4><ul>\n<li>fs.readdir(path,callback(err,files))</li>\n<li>fs.readdirSync(path) // =&gt; 返回files</li>\n</ul>\n<h3 id=\"文件监视\"><a href=\"#文件监视\" class=\"headerlink\" title=\"文件监视\"></a>文件监视</h3><h4 id=\"利用文件监视实现自动-markdown-文件转换\"><a href=\"#利用文件监视实现自动-markdown-文件转换\" class=\"headerlink\" title=\"利用文件监视实现自动 markdown 文件转换\"></a>利用文件监视实现自动 markdown 文件转换</h4><ul>\n<li><p>相关链接：</p>\n<ol>\n<li><a href=\"https://github.com/chjj/marked\" target=\"_blank\" rel=\"external\">https://github.com/chjj/marked</a></li>\n<li><a href=\"https://github.com/Browsersync/browser-sync\" target=\"_blank\" rel=\"external\">https://github.com/Browsersync/browser-sync</a></li>\n</ol>\n</li>\n<li><p>实现思路：</p>\n<ol>\n<li>利用<code>fs</code>模块的文件监视功能监视指定MD文件</li>\n<li>当文件发生变化后，借助<code>marked</code>包提供的<code>markdown</code> to <code>html</code>功能将改变后的MD文件转换为HTML</li>\n<li>再将得到的HTML替换到模版中</li>\n<li>最后利用BrowserSync模块实现浏览器自动刷新</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bs = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = path.join(__dirname, process.argv[<span class=\"number\">2</span>] || <span class=\"string\">'./README.md'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> filename = path.basename(target, path.extname(target)) + <span class=\"string\">'.html'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> targetHtml = path.join(path.dirname(target), filename);</span><br><span class=\"line\"></span><br><span class=\"line\">bs.init(&#123;</span><br><span class=\"line\">  server: path.dirname(target),</span><br><span class=\"line\">  index: filename,</span><br><span class=\"line\">  notify: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bs.reload(filename);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=\"en\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;&#123;&#123;&#123;styles&#125;&#125;&#125;&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;article class=\"markdown\"&gt;</span><br><span class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class=\"line\">  &lt;/article&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(path.join(__dirname, <span class=\"string\">'./markdown.css'</span>), <span class=\"string\">'utf8'</span>, (error, css) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  template = template.replace(<span class=\"string\">'&#123;&#123;&#123;styles&#125;&#125;&#125;'</span>, css);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> handler = (current, previous) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(target, <span class=\"string\">'utf8'</span>, (error, content) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> html = template.replace(<span class=\"string\">'&#123;&#123;&#123;body&#125;&#125;&#125;'</span>, marked(content));</span><br><span class=\"line\">      fs.writeFile(targetHtml, html, (error) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!error) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`updated@<span class=\"subst\">$&#123;new Date()&#125;</span>`</span>);</span><br><span class=\"line\">          bs.reload(filename);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handler();</span><br><span class=\"line\">  fs.watchFile(target, &#123; interval: <span class=\"number\">100</span> &#125;, handler);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"缓冲区处理\"><a href=\"#缓冲区处理\" class=\"headerlink\" title=\"缓冲区处理\"></a>缓冲区处理</h2><h3 id=\"什么是缓冲区\"><a href=\"#什么是缓冲区\" class=\"headerlink\" title=\"什么是缓冲区\"></a>什么是缓冲区</h3><ul>\n<li>缓冲区就是内存中操作数据的容器</li>\n<li>只是数据容器而已</li>\n<li>通过缓冲区可以很方便的操作二进制数据</li>\n<li>而且在大文件操作时必须有缓冲区</li>\n</ul>\n<h3 id=\"为什么要有缓冲区\"><a href=\"#为什么要有缓冲区\" class=\"headerlink\" title=\"为什么要有缓冲区\"></a>为什么要有缓冲区</h3><ul>\n<li>JavaScript是比较擅长处理字符串，但是早期的应用场景主要用于处理HTML文档，不会有太大篇幅的数据处理，也不会接触到二进制的数据。</li>\n<li>而在Node中操作数据、网络通信是没办法完全以字符串的方式操作的，简单来说</li>\n<li>所以在Node中引入了一个二进制的缓冲区的实现：Buffer</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><h3 id=\"相关模块\"><a href=\"#相关模块\" class=\"headerlink\" title=\"相关模块\"></a>相关模块</h3><p>Node内核提供了很多与文件操作相关的模块，每个模块都提供了一些最基本的操作API，在NPM中也有社区提供的功能包</p>\n<h5 id=\"fs：\"><a href=\"#fs：\" class=\"headerlink\" title=\"fs：\"></a>fs：</h5><p>基础的文件操作 API</p>\n<h5 id=\"path：\"><a href=\"#path：\" class=\"headerlink\" title=\"path：\"></a>path：</h5><p>提供和路径相关的操作 API</p>\n<h5 id=\"readline：\"><a href=\"#readline：\" class=\"headerlink\" title=\"readline：\"></a>readline：</h5><p>用于读取大文本文件，一行一行读</p>\n<h5 id=\"fs-extra（第三方）：\"><a href=\"#fs-extra（第三方）：\" class=\"headerlink\" title=\"fs-extra（第三方）：\"></a>fs-extra（第三方）：</h5><p><a href=\"https://www.npmjs.com/package/fs-extra\">https://www.npmjs.com/package/fs-extra</a></p>\n<h3 id=\"同步或异步调用\"><a href=\"#同步或异步调用\" class=\"headerlink\" title=\"同步或异步调用\"></a>同步或异步调用</h3><ul>\n<li>fs模块对文件的几乎所有操作都有同步和异步两种形式</li>\n<li>例如：readFile() 和 readFileSync()</li>\n<li>区别：<ul>\n<li>同步调用会阻塞代码的执行，异步则不会</li>\n<li>异步调用会将读取任务下达到任务队列，直到任务执行完成才会回调</li>\n<li>异常处理方面，同步必须使用 try catch 方式，异步可以通过回调函数的第一个参数</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"路径模块\"><a href=\"#路径模块\" class=\"headerlink\" title=\"路径模块\"></a>路径模块</h3><p>在文件操作的过程中，都必须使用物理路径（绝对路径），path模块提供了一系列与路径相关的 API</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'join用于拼接多个路径部分，并转化为正常格式'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> temp = path.join(__dirname, <span class=\"string\">'..'</span>, <span class=\"string\">'lyrics'</span>, <span class=\"string\">'./友谊之光.lrc'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(temp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取路径中的文件名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.basename(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取路径中的文件名并排除扩展名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.basename(temp, <span class=\"string\">'.lrc'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取不同操作系统的路径分隔符'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.platform + <span class=\"string\">'的分隔符为 '</span> + path.delimiter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'一般用于分割环境变量'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(process.env.PATH.split(path.delimiter));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径中的目录部分'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.dirname(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径中最后的扩展名'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.extname(temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径解析成一个对象的形式'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> pathObject = path.parse(temp);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pathObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径对象再转换为一个字符串的形式'</span>);</span><br><span class=\"line\"><span class=\"comment\">// pathObject.name = '我终于失去了你';</span></span><br><span class=\"line\">pathObject.base = <span class=\"string\">'我终于失去了你.lrc'</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pathObject);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.format(pathObject));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取一个路径是不是绝对路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.isAbsolute(temp));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.isAbsolute(<span class=\"string\">'../lyrics/爱的代价.lrc'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'将一个路径转换为当前系统默认的标准格式，并解析其中的./和../'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.normalize(<span class=\"string\">'c:/develop/demo\\\\hello/../world/./a.txt'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取第二个路径相对第一个路径的相对路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.relative(__dirname, temp));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'以类似命令行cd命令的方式拼接路径'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.resolve(temp, <span class=\"string\">'c:/'</span>, <span class=\"string\">'./develop'</span>, <span class=\"string\">'../application'</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'获取不同平台中路径的分隔符（默认）'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path.sep);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'允许在任意平台下以WIN32的方法调用PATH对象'</span>);</span><br><span class=\"line\"><span class=\"comment\">// console.log(path.win32);</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path === path.win32);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'===================================='</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'允许在任意平台下以POSIX的方法调用PATH对象'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(path === path.posix);</span><br></pre></td></tr></table></figure>\n<p>源码地址：<br><a href=\"https://github.com/nodejs/node/blob/master/lib/path.js\">https://github.com/nodejs/node/blob/master/lib/path.js</a></p>\n<h3 id=\"文件读取\"><a href=\"#文件读取\" class=\"headerlink\" title=\"文件读取\"></a>文件读取</h3><p>Node中文件读取的方式主要有：</p>\n<h4 id=\"fs-readFile-file-options-callback-error-data\"><a href=\"#fs-readFile-file-options-callback-error-data\" class=\"headerlink\" title=\"fs.readFile(file[, options], callback(error, data))\"></a>fs.readFile(file[, options], callback(error, data))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile(<span class=\"string\">'c:\\\\demo\\1.txt'</span>, <span class=\"string\">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-readFileSync-file-options\"><a href=\"#fs-readFileSync-file-options\" class=\"headerlink\" title=\"fs.readFileSync(file[, options])\"></a>fs.readFileSync(file[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = fs.readFileSync(<span class=\"string\">'c:\\\\demo\\1.txt'</span>, <span class=\"string\">'utf8'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 文件不存在，或者权限错误</span></span><br><span class=\"line\">  <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-createReadStream-path-options\"><a href=\"#fs-createReadStream-path-options\" class=\"headerlink\" title=\"fs.createReadStream(path[, options])\"></a>fs.createReadStream(path[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stream = fs.createReadStream(<span class=\"string\">'c:\\\\demo\\1.txt'</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> data = <span class=\"string\">''</span></span><br><span class=\"line\">stream.on(<span class=\"string\">'data'</span>, (trunk) =&gt; &#123;</span><br><span class=\"line\">  data += trunk;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">stream.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><em>由于Windows平台下默认文件编码是GBK，在Node中不支持，可以通过<a href=\"https://github.com/ashtuchkin/iconv-lite\">iconv-lite</a>解决</em></p>\n</blockquote>\n<h3 id=\"Readline模块逐行读取文本内容\"><a href=\"#Readline模块逐行读取文本内容\" class=\"headerlink\" title=\"Readline模块逐行读取文本内容\"></a>Readline模块逐行读取文本内容</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> readline = <span class=\"built_in\">require</span>(<span class=\"string\">'readline'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rl = readline.createInterface(&#123;</span><br><span class=\"line\">  input: fs.createReadStream(<span class=\"string\">'sample.txt'</span>)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">rl.on(<span class=\"string\">'line'</span>, (line) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Line from file:'</span>, line);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件写入\"><a href=\"#文件写入\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h3><p>Node中文件写入的方式主要有：</p>\n<h4 id=\"fs-writeFile-file-data-options-callback-error\"><a href=\"#fs-writeFile-file-data-options-callback-error\" class=\"headerlink\" title=\"fs.writeFile(file, data[, options], callback(error))\"></a>fs.writeFile(file, data[, options], callback(error))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile(<span class=\"string\">'c:\\\\demo\\a.txt'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(), (error) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-writeFileSync-file-data-options\"><a href=\"#fs-writeFileSync-file-data-options\" class=\"headerlink\" title=\"fs.writeFileSync(file, data[, options])\"></a>fs.writeFileSync(file, data[, options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  fs.writeFileSync(<span class=\"string\">'c:\\\\demo\\a.txt'</span>, <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 文件夹不存在，或者权限错误</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-createWriteStream-path-option\"><a href=\"#fs-createWriteStream-path-option\" class=\"headerlink\" title=\"fs.createWriteStream(path[,option])\"></a>fs.createWriteStream(path[,option])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> streamWriter = fs.createWriteStream(<span class=\"string\">'c:\\\\demo\\a.txt'</span>);</span><br><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  streamWriter.write(<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>, (error) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"文件写入-1\"><a href=\"#文件写入-1\" class=\"headerlink\" title=\"文件写入\"></a>文件写入</h3><h4 id=\"fs-appendFile-file-data-options-callback-err\"><a href=\"#fs-appendFile-file-data-options-callback-err\" class=\"headerlink\" title=\"fs.appendFile(file,data[,options],callback(err))\"></a>fs.appendFile(file,data[,options],callback(err))</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相比较之前文件流的方式，这种方式不会占用文件资源，append完成就会释放</span></span><br><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  fs.appendFile(<span class=\"string\">'c:\\\\demo\\a.txt'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>, (error) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"fs-appendFileSync-file-data-options\"><a href=\"#fs-appendFileSync-file-data-options\" class=\"headerlink\" title=\"fs.appendFileSync(file,data[,options])\"></a>fs.appendFileSync(file,data[,options])</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setInterval(() =&gt; &#123;</span><br><span class=\"line\">  fs.appendFileSync(<span class=\"string\">'c:\\\\demo\\a.txt'</span>,<span class=\"string\">`<span class=\"subst\">$&#123;new Date&#125;</span>\\n`</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他常见文件操作\"><a href=\"#其他常见文件操作\" class=\"headerlink\" title=\"其他常见文件操作\"></a>其他常见文件操作</h3><h4 id=\"验证路径是否存在（过时的API）\"><a href=\"#验证路径是否存在（过时的API）\" class=\"headerlink\" title=\"验证路径是否存在（过时的API）\"></a>验证路径是否存在（过时的API）</h4><ul>\n<li>fs.exists(path,callback(exists))</li>\n<li>fs.existsSync(path) // =&gt; 返回布尔类型 exists</li>\n</ul>\n<h4 id=\"获取文件信息\"><a href=\"#获取文件信息\" class=\"headerlink\" title=\"获取文件信息\"></a>获取文件信息</h4><ul>\n<li>fs.stat(path,callback(err,stats))</li>\n<li>fs.statSync(path) // =&gt; 返回一个fs.Stats实例</li>\n</ul>\n<h4 id=\"移动文件或重命名文件或目录\"><a href=\"#移动文件或重命名文件或目录\" class=\"headerlink\" title=\"移动文件或重命名文件或目录\"></a>移动文件或重命名文件或目录</h4><blockquote>\n<p>与命令行相同，重命名操作也可以实现文件移动</p>\n</blockquote>\n<ul>\n<li>fs.rename(oldPath,newPath,callback)</li>\n<li>fs.renameSync(oldPath,newPath)</li>\n</ul>\n<h4 id=\"删除文件\"><a href=\"#删除文件\" class=\"headerlink\" title=\"删除文件\"></a>删除文件</h4><ul>\n<li>fs.unlink(path,callback(err))</li>\n<li>fs.unlinkSync(path)</li>\n</ul>\n<h3 id=\"其他常见文件夹操作\"><a href=\"#其他常见文件夹操作\" class=\"headerlink\" title=\"其他常见文件夹操作\"></a>其他常见文件夹操作</h3><h4 id=\"创建一个目录\"><a href=\"#创建一个目录\" class=\"headerlink\" title=\"创建一个目录\"></a>创建一个目录</h4><ul>\n<li>fs.mkdir(path[,model],callback)</li>\n<li>fs.mkdirSync(path[,model])</li>\n</ul>\n<h4 id=\"删除一个空目录\"><a href=\"#删除一个空目录\" class=\"headerlink\" title=\"删除一个空目录\"></a>删除一个空目录</h4><ul>\n<li>fs.rmdir(path,callback)</li>\n<li>fs.rmdirSync(path)</li>\n</ul>\n<h4 id=\"读取一个目录\"><a href=\"#读取一个目录\" class=\"headerlink\" title=\"读取一个目录\"></a>读取一个目录</h4><ul>\n<li>fs.readdir(path,callback(err,files))</li>\n<li>fs.readdirSync(path) // =&gt; 返回files</li>\n</ul>\n<h3 id=\"文件监视\"><a href=\"#文件监视\" class=\"headerlink\" title=\"文件监视\"></a>文件监视</h3><h4 id=\"利用文件监视实现自动-markdown-文件转换\"><a href=\"#利用文件监视实现自动-markdown-文件转换\" class=\"headerlink\" title=\"利用文件监视实现自动 markdown 文件转换\"></a>利用文件监视实现自动 markdown 文件转换</h4><ul>\n<li><p>相关链接：</p>\n<ol>\n<li><a href=\"https://github.com/chjj/marked\">https://github.com/chjj/marked</a></li>\n<li><a href=\"https://github.com/Browsersync/browser-sync\">https://github.com/Browsersync/browser-sync</a></li>\n</ol>\n</li>\n<li><p>实现思路：</p>\n<ol>\n<li>利用<code>fs</code>模块的文件监视功能监视指定MD文件</li>\n<li>当文件发生变化后，借助<code>marked</code>包提供的<code>markdown</code> to <code>html</code>功能将改变后的MD文件转换为HTML</li>\n<li>再将得到的HTML替换到模版中</li>\n<li>最后利用BrowserSync模块实现浏览器自动刷新</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> marked = <span class=\"built_in\">require</span>(<span class=\"string\">'marked'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bs = <span class=\"built_in\">require</span>(<span class=\"string\">'browser-sync'</span>).create();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = path.join(__dirname, process.argv[<span class=\"number\">2</span>] || <span class=\"string\">'./README.md'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> filename = path.basename(target, path.extname(target)) + <span class=\"string\">'.html'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> targetHtml = path.join(path.dirname(target), filename);</span><br><span class=\"line\"></span><br><span class=\"line\">bs.init(&#123;</span><br><span class=\"line\">  server: path.dirname(target),</span><br><span class=\"line\">  index: filename,</span><br><span class=\"line\">  notify: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">bs.reload(filename);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> template = <span class=\"string\">`&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=\"en\"&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=\"UTF-8\"&gt;</span><br><span class=\"line\">  &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;&#123;&#123;&#123;styles&#125;&#125;&#125;&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;article class=\"markdown\"&gt;</span><br><span class=\"line\">    &#123;&#123;&#123;body&#125;&#125;&#125;</span><br><span class=\"line\">  &lt;/article&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\">`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(path.join(__dirname, <span class=\"string\">'./markdown.css'</span>), <span class=\"string\">'utf8'</span>, (error, css) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">  template = template.replace(<span class=\"string\">'&#123;&#123;&#123;styles&#125;&#125;&#125;'</span>, css);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> handler = (current, previous) =&gt; &#123;</span><br><span class=\"line\">    fs.readFile(target, <span class=\"string\">'utf8'</span>, (error, content) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> html = template.replace(<span class=\"string\">'&#123;&#123;&#123;body&#125;&#125;&#125;'</span>, marked(content));</span><br><span class=\"line\">      fs.writeFile(targetHtml, html, (error) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!error) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">`updated@<span class=\"subst\">$&#123;new Date()&#125;</span>`</span>);</span><br><span class=\"line\">          bs.reload(filename);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  handler();</span><br><span class=\"line\">  fs.watchFile(target, &#123; interval: <span class=\"number\">100</span> &#125;, handler);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"缓冲区处理\"><a href=\"#缓冲区处理\" class=\"headerlink\" title=\"缓冲区处理\"></a>缓冲区处理</h2><h3 id=\"什么是缓冲区\"><a href=\"#什么是缓冲区\" class=\"headerlink\" title=\"什么是缓冲区\"></a>什么是缓冲区</h3><ul>\n<li>缓冲区就是内存中操作数据的容器</li>\n<li>只是数据容器而已</li>\n<li>通过缓冲区可以很方便的操作二进制数据</li>\n<li>而且在大文件操作时必须有缓冲区</li>\n</ul>\n<h3 id=\"为什么要有缓冲区\"><a href=\"#为什么要有缓冲区\" class=\"headerlink\" title=\"为什么要有缓冲区\"></a>为什么要有缓冲区</h3><ul>\n<li>JavaScript是比较擅长处理字符串，但是早期的应用场景主要用于处理HTML文档，不会有太大篇幅的数据处理，也不会接触到二进制的数据。</li>\n<li>而在Node中操作数据、网络通信是没办法完全以字符串的方式操作的，简单来说</li>\n<li>所以在Node中引入了一个二进制的缓冲区的实现：Buffer</li>\n</ul>\n"},{"title":"Node基础篇（模块和NPM）","date":"2016-05-02T08:21:10.000Z","_content":"## 核心模块\n\n### 核心模块的意义\n\n- 如果只是在服务器运行JavaScript代码，意义并不大，因为无法实现任何功能（读写文件，访问网络）。\n- Node 的用处在于它本身还提供的一系列功能模块，用于与操作系统互动。\n- 这些核心的功能模块在 Node 中内置。\n\n\n\n### 内置如下模块：\n\n- [path](http://nodejs.org/api/path.html)：处理文件路径。\n- [fs](http://nodejs.org/api/fs.html)：操作文件系统。\n- [child_process](http://nodejs.org/api/child_process.html)：新建子进程。\n- [util](http://nodejs.org/api/util.html)：提供一系列实用小工具。\n- [http](http://nodejs.org/api/http.html)：提供HTTP服务器功能。\n- [url](http://nodejs.org/api/url.html)：用于解析URL。\n- [querystring](http://nodejs.org/api/querystring.html)：解析URL中的查询字符串。\n- [crypto](http://nodejs.org/api/crypto.html)：提供加密和解密功能。\n- [其他](https://nodejs.org/api/)\n\n\n\n\n*****\n\n## Node Package\n\n> 由于Node是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（Package）的概念。与核心模块类似，就是将一些预先设计好的功能或者说API封装到一个文件夹，提供给开发者使用；\n\n\n### 包的加载机制\n\n- 与内置模块相同，包的加载同样使用`require`方法\n\n```javascript\nconst express = require('express');\n```\n\n- 加载机制也和内置模块加载机制相同\n- 加载注意事项：\n  + 先在系统核心（优先级最高）的模块中找；\n\n```javascript\nconst fs = require('fs');\n// 永远加载内部核心模块fs\n```\n\n  + 然后再到当前项目中 node_modules 目录中找；\n\n\n### 如何管理好自己的包包\n\n- 由于`Node`本身并没有太多的功能性`API`，所以市面上涌现出大量的第三方人员开发出来的`Package`\n![www.npmjs.com](http://files.wedn.net/2016/03/npm-1457192944176.png)\n- 包的生态圈一旦繁荣起来，就必须有工具去代替人脑或者文档的方式管理\n- 这时候`NPM`诞生了\n\n\n### NPM\n\n- 随着时间的发展，NPM 出现了两层概念：\n  + 一层含义是 Node 的开放式模块登记和管理系统，亦可以说是一个生态圈，一个社区\n  + 另一层含义是 Node 默认的模块管理器，是一个命令行下的软件，用来安装和管理 Node 模块。\n\n- 官方链接： https://www.npmjs.com/\n- 国内加速镜像： https://npm.taobao.org/\n\n### 安装NPM\n\n- NPM 不需要单独安装。默认在安装 Node 的时候，会连带一起安装 NPM。\n- 但是，Node 附带的 NPM 可能不是最新版本，最好用下面的命令，更新到最新版本。\n\n```bash\n$ npm install npm -g\n```\n\n- 默认安装到当前系统 Node 所在目录下。\n- 由于之前使用 NVM 的方式安装的 Node 所以需要重新配置 NPM 的全局目录\n\n### 配置NPM的全局目录\n\n```bash\n$ npm config set prefix [pathtonpm]\n```\n\n- 将NPM目录配置到其他目录时，必须将该目录放到环境变量中，否则无法再全局使用\n\n\n### 常用NPM命令\n\n- https://docs.npmjs.com/\n\n```bash\nnpm config [ls|list|set|get] [name] [value]\nnpm init [--yes|-y]\nnpm search [name]\nnpm info [name]\nnpm install [--global|-g] [name]\nnpm uninstall [--global|-g] [name]\nnpm list [--global|-g]\nnpm outdated [--global|-g]\nnpm update [--global|-g] [name]\nnpm run [task]\nnpm cache [clean]\n```\n\n\n","source":"_posts/node-essential-module-npm.md","raw":"---\ntitle: Node基础篇（模块和NPM）\ndate: 2016-05-02 16:21:10\ntags:\n  Node\n  NPM\n---\n## 核心模块\n\n### 核心模块的意义\n\n- 如果只是在服务器运行JavaScript代码，意义并不大，因为无法实现任何功能（读写文件，访问网络）。\n- Node 的用处在于它本身还提供的一系列功能模块，用于与操作系统互动。\n- 这些核心的功能模块在 Node 中内置。\n\n\n\n### 内置如下模块：\n\n- [path](http://nodejs.org/api/path.html)：处理文件路径。\n- [fs](http://nodejs.org/api/fs.html)：操作文件系统。\n- [child_process](http://nodejs.org/api/child_process.html)：新建子进程。\n- [util](http://nodejs.org/api/util.html)：提供一系列实用小工具。\n- [http](http://nodejs.org/api/http.html)：提供HTTP服务器功能。\n- [url](http://nodejs.org/api/url.html)：用于解析URL。\n- [querystring](http://nodejs.org/api/querystring.html)：解析URL中的查询字符串。\n- [crypto](http://nodejs.org/api/crypto.html)：提供加密和解密功能。\n- [其他](https://nodejs.org/api/)\n\n\n\n\n*****\n\n## Node Package\n\n> 由于Node是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（Package）的概念。与核心模块类似，就是将一些预先设计好的功能或者说API封装到一个文件夹，提供给开发者使用；\n\n\n### 包的加载机制\n\n- 与内置模块相同，包的加载同样使用`require`方法\n\n```javascript\nconst express = require('express');\n```\n\n- 加载机制也和内置模块加载机制相同\n- 加载注意事项：\n  + 先在系统核心（优先级最高）的模块中找；\n\n```javascript\nconst fs = require('fs');\n// 永远加载内部核心模块fs\n```\n\n  + 然后再到当前项目中 node_modules 目录中找；\n\n\n### 如何管理好自己的包包\n\n- 由于`Node`本身并没有太多的功能性`API`，所以市面上涌现出大量的第三方人员开发出来的`Package`\n![www.npmjs.com](http://files.wedn.net/2016/03/npm-1457192944176.png)\n- 包的生态圈一旦繁荣起来，就必须有工具去代替人脑或者文档的方式管理\n- 这时候`NPM`诞生了\n\n\n### NPM\n\n- 随着时间的发展，NPM 出现了两层概念：\n  + 一层含义是 Node 的开放式模块登记和管理系统，亦可以说是一个生态圈，一个社区\n  + 另一层含义是 Node 默认的模块管理器，是一个命令行下的软件，用来安装和管理 Node 模块。\n\n- 官方链接： https://www.npmjs.com/\n- 国内加速镜像： https://npm.taobao.org/\n\n### 安装NPM\n\n- NPM 不需要单独安装。默认在安装 Node 的时候，会连带一起安装 NPM。\n- 但是，Node 附带的 NPM 可能不是最新版本，最好用下面的命令，更新到最新版本。\n\n```bash\n$ npm install npm -g\n```\n\n- 默认安装到当前系统 Node 所在目录下。\n- 由于之前使用 NVM 的方式安装的 Node 所以需要重新配置 NPM 的全局目录\n\n### 配置NPM的全局目录\n\n```bash\n$ npm config set prefix [pathtonpm]\n```\n\n- 将NPM目录配置到其他目录时，必须将该目录放到环境变量中，否则无法再全局使用\n\n\n### 常用NPM命令\n\n- https://docs.npmjs.com/\n\n```bash\nnpm config [ls|list|set|get] [name] [value]\nnpm init [--yes|-y]\nnpm search [name]\nnpm info [name]\nnpm install [--global|-g] [name]\nnpm uninstall [--global|-g] [name]\nnpm list [--global|-g]\nnpm outdated [--global|-g]\nnpm update [--global|-g] [name]\nnpm run [task]\nnpm cache [clean]\n```\n\n\n","slug":"node-essential-module-npm","published":1,"updated":"2016-05-02T08:29:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyw0000eu5i1duyrkwjf","content":"<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><h3 id=\"核心模块的意义\"><a href=\"#核心模块的意义\" class=\"headerlink\" title=\"核心模块的意义\"></a>核心模块的意义</h3><ul>\n<li>如果只是在服务器运行JavaScript代码，意义并不大，因为无法实现任何功能（读写文件，访问网络）。</li>\n<li>Node 的用处在于它本身还提供的一系列功能模块，用于与操作系统互动。</li>\n<li>这些核心的功能模块在 Node 中内置。</li>\n</ul>\n<h3 id=\"内置如下模块：\"><a href=\"#内置如下模块：\" class=\"headerlink\" title=\"内置如下模块：\"></a>内置如下模块：</h3><ul>\n<li><a href=\"http://nodejs.org/api/path.html\" target=\"_blank\" rel=\"external\">path</a>：处理文件路径。</li>\n<li><a href=\"http://nodejs.org/api/fs.html\" target=\"_blank\" rel=\"external\">fs</a>：操作文件系统。</li>\n<li><a href=\"http://nodejs.org/api/child_process.html\" target=\"_blank\" rel=\"external\">child_process</a>：新建子进程。</li>\n<li><a href=\"http://nodejs.org/api/util.html\" target=\"_blank\" rel=\"external\">util</a>：提供一系列实用小工具。</li>\n<li><a href=\"http://nodejs.org/api/http.html\" target=\"_blank\" rel=\"external\">http</a>：提供HTTP服务器功能。</li>\n<li><a href=\"http://nodejs.org/api/url.html\" target=\"_blank\" rel=\"external\">url</a>：用于解析URL。</li>\n<li><a href=\"http://nodejs.org/api/querystring.html\" target=\"_blank\" rel=\"external\">querystring</a>：解析URL中的查询字符串。</li>\n<li><a href=\"http://nodejs.org/api/crypto.html\" target=\"_blank\" rel=\"external\">crypto</a>：提供加密和解密功能。</li>\n<li><a href=\"https://nodejs.org/api/\" target=\"_blank\" rel=\"external\">其他</a></li>\n</ul>\n<hr>\n<h2 id=\"Node-Package\"><a href=\"#Node-Package\" class=\"headerlink\" title=\"Node Package\"></a>Node Package</h2><blockquote>\n<p>由于Node是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（Package）的概念。与核心模块类似，就是将一些预先设计好的功能或者说API封装到一个文件夹，提供给开发者使用；</p>\n</blockquote>\n<h3 id=\"包的加载机制\"><a href=\"#包的加载机制\" class=\"headerlink\" title=\"包的加载机制\"></a>包的加载机制</h3><ul>\n<li>与内置模块相同，包的加载同样使用<code>require</code>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载机制也和内置模块加载机制相同</li>\n<li>加载注意事项：<ul>\n<li>先在系统核心（优先级最高）的模块中找；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 永远加载内部核心模块fs</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后再到当前项目中 node_modules 目录中找；</li>\n</ul>\n<h3 id=\"如何管理好自己的包包\"><a href=\"#如何管理好自己的包包\" class=\"headerlink\" title=\"如何管理好自己的包包\"></a>如何管理好自己的包包</h3><ul>\n<li>由于<code>Node</code>本身并没有太多的功能性<code>API</code>，所以市面上涌现出大量的第三方人员开发出来的<code>Package</code><br><img src=\"http://files.wedn.net/2016/03/npm-1457192944176.png\" alt=\"www.npmjs.com\"></li>\n<li>包的生态圈一旦繁荣起来，就必须有工具去代替人脑或者文档的方式管理</li>\n<li>这时候<code>NPM</code>诞生了</li>\n</ul>\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><ul>\n<li><p>随着时间的发展，NPM 出现了两层概念：</p>\n<ul>\n<li>一层含义是 Node 的开放式模块登记和管理系统，亦可以说是一个生态圈，一个社区</li>\n<li>另一层含义是 Node 默认的模块管理器，是一个命令行下的软件，用来安装和管理 Node 模块。</li>\n</ul>\n</li>\n<li><p>官方链接： <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/</a></p>\n</li>\n<li>国内加速镜像： <a href=\"https://npm.taobao.org/\" target=\"_blank\" rel=\"external\">https://npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"安装NPM\"><a href=\"#安装NPM\" class=\"headerlink\" title=\"安装NPM\"></a>安装NPM</h3><ul>\n<li>NPM 不需要单独安装。默认在安装 Node 的时候，会连带一起安装 NPM。</li>\n<li>但是，Node 附带的 NPM 可能不是最新版本，最好用下面的命令，更新到最新版本。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install npm -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认安装到当前系统 Node 所在目录下。</li>\n<li>由于之前使用 NVM 的方式安装的 Node 所以需要重新配置 NPM 的全局目录</li>\n</ul>\n<h3 id=\"配置NPM的全局目录\"><a href=\"#配置NPM的全局目录\" class=\"headerlink\" title=\"配置NPM的全局目录\"></a>配置NPM的全局目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> prefix [pathtonpm]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将NPM目录配置到其他目录时，必须将该目录放到环境变量中，否则无法再全局使用</li>\n</ul>\n<h3 id=\"常用NPM命令\"><a href=\"#常用NPM命令\" class=\"headerlink\" title=\"常用NPM命令\"></a>常用NPM命令</h3><ul>\n<li><a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"external\">https://docs.npmjs.com/</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config [ls|list|<span class=\"built_in\">set</span>|get] [name] [value]</span><br><span class=\"line\">npm init [--yes|-y]</span><br><span class=\"line\">npm search [name]</span><br><span class=\"line\">npm info [name]</span><br><span class=\"line\">npm install [--global|-g] [name]</span><br><span class=\"line\">npm uninstall [--global|-g] [name]</span><br><span class=\"line\">npm list [--global|-g]</span><br><span class=\"line\">npm outdated [--global|-g]</span><br><span class=\"line\">npm update [--global|-g] [name]</span><br><span class=\"line\">npm run [task]</span><br><span class=\"line\">npm cache [clean]</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"核心模块\"><a href=\"#核心模块\" class=\"headerlink\" title=\"核心模块\"></a>核心模块</h2><h3 id=\"核心模块的意义\"><a href=\"#核心模块的意义\" class=\"headerlink\" title=\"核心模块的意义\"></a>核心模块的意义</h3><ul>\n<li>如果只是在服务器运行JavaScript代码，意义并不大，因为无法实现任何功能（读写文件，访问网络）。</li>\n<li>Node 的用处在于它本身还提供的一系列功能模块，用于与操作系统互动。</li>\n<li>这些核心的功能模块在 Node 中内置。</li>\n</ul>\n<h3 id=\"内置如下模块：\"><a href=\"#内置如下模块：\" class=\"headerlink\" title=\"内置如下模块：\"></a>内置如下模块：</h3><ul>\n<li><a href=\"http://nodejs.org/api/path.html\">path</a>：处理文件路径。</li>\n<li><a href=\"http://nodejs.org/api/fs.html\">fs</a>：操作文件系统。</li>\n<li><a href=\"http://nodejs.org/api/child_process.html\">child_process</a>：新建子进程。</li>\n<li><a href=\"http://nodejs.org/api/util.html\">util</a>：提供一系列实用小工具。</li>\n<li><a href=\"http://nodejs.org/api/http.html\">http</a>：提供HTTP服务器功能。</li>\n<li><a href=\"http://nodejs.org/api/url.html\">url</a>：用于解析URL。</li>\n<li><a href=\"http://nodejs.org/api/querystring.html\">querystring</a>：解析URL中的查询字符串。</li>\n<li><a href=\"http://nodejs.org/api/crypto.html\">crypto</a>：提供加密和解密功能。</li>\n<li><a href=\"https://nodejs.org/api/\">其他</a></li>\n</ul>\n<hr>\n<h2 id=\"Node-Package\"><a href=\"#Node-Package\" class=\"headerlink\" title=\"Node Package\"></a>Node Package</h2><blockquote>\n<p>由于Node是一套轻内核的平台，虽然提供了一系列的内置模块，但是不足以满足开发者的需求，于是乎出现了包（Package）的概念。与核心模块类似，就是将一些预先设计好的功能或者说API封装到一个文件夹，提供给开发者使用；</p>\n</blockquote>\n<h3 id=\"包的加载机制\"><a href=\"#包的加载机制\" class=\"headerlink\" title=\"包的加载机制\"></a>包的加载机制</h3><ul>\n<li>与内置模块相同，包的加载同样使用<code>require</code>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>加载机制也和内置模块加载机制相同</li>\n<li>加载注意事项：<ul>\n<li>先在系统核心（优先级最高）的模块中找；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 永远加载内部核心模块fs</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后再到当前项目中 node_modules 目录中找；</li>\n</ul>\n<h3 id=\"如何管理好自己的包包\"><a href=\"#如何管理好自己的包包\" class=\"headerlink\" title=\"如何管理好自己的包包\"></a>如何管理好自己的包包</h3><ul>\n<li>由于<code>Node</code>本身并没有太多的功能性<code>API</code>，所以市面上涌现出大量的第三方人员开发出来的<code>Package</code><br><img src=\"http://files.wedn.net/2016/03/npm-1457192944176.png\" alt=\"www.npmjs.com\"></li>\n<li>包的生态圈一旦繁荣起来，就必须有工具去代替人脑或者文档的方式管理</li>\n<li>这时候<code>NPM</code>诞生了</li>\n</ul>\n<h3 id=\"NPM\"><a href=\"#NPM\" class=\"headerlink\" title=\"NPM\"></a>NPM</h3><ul>\n<li><p>随着时间的发展，NPM 出现了两层概念：</p>\n<ul>\n<li>一层含义是 Node 的开放式模块登记和管理系统，亦可以说是一个生态圈，一个社区</li>\n<li>另一层含义是 Node 默认的模块管理器，是一个命令行下的软件，用来安装和管理 Node 模块。</li>\n</ul>\n</li>\n<li><p>官方链接： <a href=\"https://www.npmjs.com/\">https://www.npmjs.com/</a></p>\n</li>\n<li>国内加速镜像： <a href=\"https://npm.taobao.org/\">https://npm.taobao.org/</a></li>\n</ul>\n<h3 id=\"安装NPM\"><a href=\"#安装NPM\" class=\"headerlink\" title=\"安装NPM\"></a>安装NPM</h3><ul>\n<li>NPM 不需要单独安装。默认在安装 Node 的时候，会连带一起安装 NPM。</li>\n<li>但是，Node 附带的 NPM 可能不是最新版本，最好用下面的命令，更新到最新版本。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install npm -g</span><br></pre></td></tr></table></figure>\n<ul>\n<li>默认安装到当前系统 Node 所在目录下。</li>\n<li>由于之前使用 NVM 的方式安装的 Node 所以需要重新配置 NPM 的全局目录</li>\n</ul>\n<h3 id=\"配置NPM的全局目录\"><a href=\"#配置NPM的全局目录\" class=\"headerlink\" title=\"配置NPM的全局目录\"></a>配置NPM的全局目录</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm config <span class=\"built_in\">set</span> prefix [pathtonpm]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将NPM目录配置到其他目录时，必须将该目录放到环境变量中，否则无法再全局使用</li>\n</ul>\n<h3 id=\"常用NPM命令\"><a href=\"#常用NPM命令\" class=\"headerlink\" title=\"常用NPM命令\"></a>常用NPM命令</h3><ul>\n<li><a href=\"https://docs.npmjs.com/\">https://docs.npmjs.com/</a></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config [ls|list|<span class=\"built_in\">set</span>|get] [name] [value]</span><br><span class=\"line\">npm init [--yes|-y]</span><br><span class=\"line\">npm search [name]</span><br><span class=\"line\">npm info [name]</span><br><span class=\"line\">npm install [--global|-g] [name]</span><br><span class=\"line\">npm uninstall [--global|-g] [name]</span><br><span class=\"line\">npm list [--global|-g]</span><br><span class=\"line\">npm outdated [--global|-g]</span><br><span class=\"line\">npm update [--global|-g] [name]</span><br><span class=\"line\">npm run [task]</span><br><span class=\"line\">npm cache [clean]</span><br></pre></td></tr></table></figure>\n"},{"title":"Node基础篇（概要）","date":"2016-05-02T08:20:54.000Z","_content":"## Node简介\n\n### 客户端的JavaScript是怎样的\n\n- 什么是 JavaScript？\n  + 脚本语言\n  + 运行在浏览器中\n  + 一般用来做客户端页面的交互（Interactive）\n\n- JavaScript 的运行环境？\n  + 是不是运行在浏览器呢？\n  + 不够严谨\n  + 运行在浏览器内核中的 JS 引擎（engine）\n\n- 浏览器中的 JavaScript 可以做什么？\n  + 操作DOM（对DOM的增删改、注册事件）\n  + AJAX/跨域\n  + BOM（页面跳转、历史记录、console.log()、alert()）\n  + ECMAScript\n\n- 浏览器中的 JavaScript 不可以做什么？\n  + 文件操作（文件和文件夹的CRUD）\n  + 没有办法操作系统信息\n  + 由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）\n\n- 在开发人员能力相同的情况下编程语言的能力取决于什么？\n  + -语言本身？-\n  + 语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作\n  + 取决于运行该语言的平台（环境）\n  + 对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定\n  + BOM和DOM可以说是浏览器开放出来的接口\n  + 比如：Cordova中提供JS调用摄像头，操作本地文件的API\n\n  + Java既是语言也是平台\n  + Java运行在Java虚拟机（跨操作系统）\n  + PHP既是语言也是平台（跨操作系统）\n\n  + C#语言平台：.NET Framework（Windows）\n  + C#可以运行在MONO这样的平台\n  + 因为有人需要将C#运行在Linux平台，所有出现了MONO\n\n\n- JavaScript 只可以运行在浏览器中吗？\n  + 不是\n  + 能运行在哪取决于，这个环境有没有特定平台\n\n\n### 什么是Node\n\n- Node 就是 JavaScript 语言在服务器端的运行环境\n- 所谓“运行环境（平台）”有两层意思：\n  + 首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；\n  + 其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。\n\n\n\n### 为什么是JavaScript\n\n\n\n\n### Node的实现结构\n\n\n\n\n### Node在当下Web开发领域的应用\n\n\n\n\n### 哪些公司在用\n\n\n\n\n### 重点理解\n\n- Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；\n- Node的实现结构；\n- Node可以用来开发服务端应用程序，Web系统；\n- 基于Node的前端工具集\n\n\n\n\n\n*****\n\n## 环境配置\n\n### 安装包的方式安装\n\n- 安装包下载链接：\n  + Mac OSX： [darwin](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg)\n  + Windows：\n    * [x64](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi)\n    * [x86](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi)\n- 安装操作：\n  + 一路*Next*\n\n\n### 更新版本\n\n- 操作方式：\n  + 重新下载最新的安装包；\n  + 覆盖安装即可；\n- 问题：\n  + 以前版本安装的很多全局的工具包需要重新安装\n  + 无法回滚到之前的版本\n  + 无法在多个版本之间切换（很多时候我们要使用特定版本）\n\n\n\n### NVM工具的使用\n\n> Node Version Manager（Node版本管理工具）\n\n由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理\n\n\n#### 安装操作步骤\n\n1. 下载：[nvm-windows](https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip)\n2. 解压到一个全英文路径\n3. 编辑解压目录下的`settings.txt`文件（不存在则新建）\n\n  + `root 配置为当前 nvm.exe 所在目录`\n  + `path 配置为 node 快捷方式所在的目录`\n  + `arch 配置为当前操作系统的位数（32/64）`\n  + `proxy 不用配置`\n\n4. 配置环境变量 可以通过 window+r  : sysdm.cpl\n\n  + `NVM_HOME = 当前 nvm.exe 所在目录`\n  + `NVM_SYMLINK = node 快捷方式所在的目录`\n  + `PATH += %NVM_HOME%;%NVM_SYMLINK%;`\n  + 打开CMD通过`set [name]`命令查看环境变量是否配置成功\n  + PowerShell中是通过`dir env:[name]`命令\n\n5. NVM使用说明：\n\n  + https://github.com/coreybutler/nvm-windows/\n\n6. NPM的目录之后使用再配置\n\n\n### 配置Python环境\n\n> Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译\n> 确保全局环境中可以使用python命令\n\n\n\n\n### 环境变量的概念\n\n> 环境变量就是操作系统提供的系统级别用于存储变量的地方\n\n- Windows中环境变量分为系统变量和用户变量\n- 环境变量的变量名是不区分大小写的\n- 特殊值：\n  + PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索\n\n\n\n### Windows下常用的命令行操作\n\n- 切换当前目录（change directory）：cd\n- 创建目录（make directory）：mkdir\n- 查看当前目录列表（directory）：dir\n  + 别名：ls（list）\n- 清空当前控制台：cls\n  + 别名：clear\n- 删除文件：del\n  + 别名：rm\n\n> 注意：所有别名必须在新版本的 PowerShell 中使用\n\n\n\n*****\n\n## 快速上手\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 事件驱动和非阻塞\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 模块化开发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/node-essential-summary.md","raw":"---\ntitle: Node基础篇（概要）\ndate: 2016-05-02 16:20:54\ntags:\n  Node\n---\n## Node简介\n\n### 客户端的JavaScript是怎样的\n\n- 什么是 JavaScript？\n  + 脚本语言\n  + 运行在浏览器中\n  + 一般用来做客户端页面的交互（Interactive）\n\n- JavaScript 的运行环境？\n  + 是不是运行在浏览器呢？\n  + 不够严谨\n  + 运行在浏览器内核中的 JS 引擎（engine）\n\n- 浏览器中的 JavaScript 可以做什么？\n  + 操作DOM（对DOM的增删改、注册事件）\n  + AJAX/跨域\n  + BOM（页面跳转、历史记录、console.log()、alert()）\n  + ECMAScript\n\n- 浏览器中的 JavaScript 不可以做什么？\n  + 文件操作（文件和文件夹的CRUD）\n  + 没有办法操作系统信息\n  + 由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）\n\n- 在开发人员能力相同的情况下编程语言的能力取决于什么？\n  + -语言本身？-\n  + 语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作\n  + 取决于运行该语言的平台（环境）\n  + 对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定\n  + BOM和DOM可以说是浏览器开放出来的接口\n  + 比如：Cordova中提供JS调用摄像头，操作本地文件的API\n\n  + Java既是语言也是平台\n  + Java运行在Java虚拟机（跨操作系统）\n  + PHP既是语言也是平台（跨操作系统）\n\n  + C#语言平台：.NET Framework（Windows）\n  + C#可以运行在MONO这样的平台\n  + 因为有人需要将C#运行在Linux平台，所有出现了MONO\n\n\n- JavaScript 只可以运行在浏览器中吗？\n  + 不是\n  + 能运行在哪取决于，这个环境有没有特定平台\n\n\n### 什么是Node\n\n- Node 就是 JavaScript 语言在服务器端的运行环境\n- 所谓“运行环境（平台）”有两层意思：\n  + 首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；\n  + 其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。\n\n\n\n### 为什么是JavaScript\n\n\n\n\n### Node的实现结构\n\n\n\n\n### Node在当下Web开发领域的应用\n\n\n\n\n### 哪些公司在用\n\n\n\n\n### 重点理解\n\n- Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；\n- Node的实现结构；\n- Node可以用来开发服务端应用程序，Web系统；\n- 基于Node的前端工具集\n\n\n\n\n\n*****\n\n## 环境配置\n\n### 安装包的方式安装\n\n- 安装包下载链接：\n  + Mac OSX： [darwin](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg)\n  + Windows：\n    * [x64](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi)\n    * [x86](http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi)\n- 安装操作：\n  + 一路*Next*\n\n\n### 更新版本\n\n- 操作方式：\n  + 重新下载最新的安装包；\n  + 覆盖安装即可；\n- 问题：\n  + 以前版本安装的很多全局的工具包需要重新安装\n  + 无法回滚到之前的版本\n  + 无法在多个版本之间切换（很多时候我们要使用特定版本）\n\n\n\n### NVM工具的使用\n\n> Node Version Manager（Node版本管理工具）\n\n由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理\n\n\n#### 安装操作步骤\n\n1. 下载：[nvm-windows](https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip)\n2. 解压到一个全英文路径\n3. 编辑解压目录下的`settings.txt`文件（不存在则新建）\n\n  + `root 配置为当前 nvm.exe 所在目录`\n  + `path 配置为 node 快捷方式所在的目录`\n  + `arch 配置为当前操作系统的位数（32/64）`\n  + `proxy 不用配置`\n\n4. 配置环境变量 可以通过 window+r  : sysdm.cpl\n\n  + `NVM_HOME = 当前 nvm.exe 所在目录`\n  + `NVM_SYMLINK = node 快捷方式所在的目录`\n  + `PATH += %NVM_HOME%;%NVM_SYMLINK%;`\n  + 打开CMD通过`set [name]`命令查看环境变量是否配置成功\n  + PowerShell中是通过`dir env:[name]`命令\n\n5. NVM使用说明：\n\n  + https://github.com/coreybutler/nvm-windows/\n\n6. NPM的目录之后使用再配置\n\n\n### 配置Python环境\n\n> Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译\n> 确保全局环境中可以使用python命令\n\n\n\n\n### 环境变量的概念\n\n> 环境变量就是操作系统提供的系统级别用于存储变量的地方\n\n- Windows中环境变量分为系统变量和用户变量\n- 环境变量的变量名是不区分大小写的\n- 特殊值：\n  + PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索\n\n\n\n### Windows下常用的命令行操作\n\n- 切换当前目录（change directory）：cd\n- 创建目录（make directory）：mkdir\n- 查看当前目录列表（directory）：dir\n  + 别名：ls（list）\n- 清空当前控制台：cls\n  + 别名：clear\n- 删除文件：del\n  + 别名：rm\n\n> 注意：所有别名必须在新版本的 PowerShell 中使用\n\n\n\n*****\n\n## 快速上手\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 事件驱动和非阻塞\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n*****\n\n## 模块化开发\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"node-essential-summary","published":1,"updated":"2016-05-02T08:26:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyw3000gu5i1s1gbgxch","content":"<h2 id=\"Node简介\"><a href=\"#Node简介\" class=\"headerlink\" title=\"Node简介\"></a>Node简介</h2><h3 id=\"客户端的JavaScript是怎样的\"><a href=\"#客户端的JavaScript是怎样的\" class=\"headerlink\" title=\"客户端的JavaScript是怎样的\"></a>客户端的JavaScript是怎样的</h3><ul>\n<li><p>什么是 JavaScript？</p>\n<ul>\n<li>脚本语言</li>\n<li>运行在浏览器中</li>\n<li>一般用来做客户端页面的交互（Interactive）</li>\n</ul>\n</li>\n<li><p>JavaScript 的运行环境？</p>\n<ul>\n<li>是不是运行在浏览器呢？</li>\n<li>不够严谨</li>\n<li>运行在浏览器内核中的 JS 引擎（engine）</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 可以做什么？</p>\n<ul>\n<li>操作DOM（对DOM的增删改、注册事件）</li>\n<li>AJAX/跨域</li>\n<li>BOM（页面跳转、历史记录、console.log()、alert()）</li>\n<li>ECMAScript</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 不可以做什么？</p>\n<ul>\n<li>文件操作（文件和文件夹的CRUD）</li>\n<li>没有办法操作系统信息</li>\n<li>由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）</li>\n</ul>\n</li>\n<li><p>在开发人员能力相同的情况下编程语言的能力取决于什么？</p>\n<ul>\n<li>-语言本身？-</li>\n<li>语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作</li>\n<li>取决于运行该语言的平台（环境）</li>\n<li>对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定</li>\n<li>BOM和DOM可以说是浏览器开放出来的接口</li>\n<li><p>比如：Cordova中提供JS调用摄像头，操作本地文件的API</p>\n</li>\n<li><p>Java既是语言也是平台</p>\n</li>\n<li>Java运行在Java虚拟机（跨操作系统）</li>\n<li><p>PHP既是语言也是平台（跨操作系统）</p>\n</li>\n<li><p>C#语言平台：.NET Framework（Windows）</p>\n</li>\n<li>C#可以运行在MONO这样的平台</li>\n<li>因为有人需要将C#运行在Linux平台，所有出现了MONO</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>JavaScript 只可以运行在浏览器中吗？<ul>\n<li>不是</li>\n<li>能运行在哪取决于，这个环境有没有特定平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是Node\"><a href=\"#什么是Node\" class=\"headerlink\" title=\"什么是Node\"></a>什么是Node</h3><ul>\n<li>Node 就是 JavaScript 语言在服务器端的运行环境</li>\n<li>所谓“运行环境（平台）”有两层意思：<ul>\n<li>首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；</li>\n<li>其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么是JavaScript\"><a href=\"#为什么是JavaScript\" class=\"headerlink\" title=\"为什么是JavaScript\"></a>为什么是JavaScript</h3><h3 id=\"Node的实现结构\"><a href=\"#Node的实现结构\" class=\"headerlink\" title=\"Node的实现结构\"></a>Node的实现结构</h3><h3 id=\"Node在当下Web开发领域的应用\"><a href=\"#Node在当下Web开发领域的应用\" class=\"headerlink\" title=\"Node在当下Web开发领域的应用\"></a>Node在当下Web开发领域的应用</h3><h3 id=\"哪些公司在用\"><a href=\"#哪些公司在用\" class=\"headerlink\" title=\"哪些公司在用\"></a>哪些公司在用</h3><h3 id=\"重点理解\"><a href=\"#重点理解\" class=\"headerlink\" title=\"重点理解\"></a>重点理解</h3><ul>\n<li>Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；</li>\n<li>Node的实现结构；</li>\n<li>Node可以用来开发服务端应用程序，Web系统；</li>\n<li>基于Node的前端工具集</li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装包的方式安装\"><a href=\"#安装包的方式安装\" class=\"headerlink\" title=\"安装包的方式安装\"></a>安装包的方式安装</h3><ul>\n<li>安装包下载链接：<ul>\n<li>Mac OSX： <a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg\" target=\"_blank\" rel=\"external\">darwin</a></li>\n<li>Windows：<ul>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi\" target=\"_blank\" rel=\"external\">x64</a></li>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi\" target=\"_blank\" rel=\"external\">x86</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安装操作：<ul>\n<li>一路<em>Next</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h3><ul>\n<li>操作方式：<ul>\n<li>重新下载最新的安装包；</li>\n<li>覆盖安装即可；</li>\n</ul>\n</li>\n<li>问题：<ul>\n<li>以前版本安装的很多全局的工具包需要重新安装</li>\n<li>无法回滚到之前的版本</li>\n<li>无法在多个版本之间切换（很多时候我们要使用特定版本）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NVM工具的使用\"><a href=\"#NVM工具的使用\" class=\"headerlink\" title=\"NVM工具的使用\"></a>NVM工具的使用</h3><blockquote>\n<p>Node Version Manager（Node版本管理工具）</p>\n</blockquote>\n<p>由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理</p>\n<h4 id=\"安装操作步骤\"><a href=\"#安装操作步骤\" class=\"headerlink\" title=\"安装操作步骤\"></a>安装操作步骤</h4><ol>\n<li>下载：<a href=\"https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip\" target=\"_blank\" rel=\"external\">nvm-windows</a></li>\n<li>解压到一个全英文路径</li>\n<li><p>编辑解压目录下的<code>settings.txt</code>文件（不存在则新建）</p>\n<ul>\n<li><code>root 配置为当前 nvm.exe 所在目录</code></li>\n<li><code>path 配置为 node 快捷方式所在的目录</code></li>\n<li><code>arch 配置为当前操作系统的位数（32/64）</code></li>\n<li><code>proxy 不用配置</code></li>\n</ul>\n</li>\n<li><p>配置环境变量 可以通过 window+r  : sysdm.cpl</p>\n<ul>\n<li><code>NVM_HOME = 当前 nvm.exe 所在目录</code></li>\n<li><code>NVM_SYMLINK = node 快捷方式所在的目录</code></li>\n<li><code>PATH += %NVM_HOME%;%NVM_SYMLINK%;</code></li>\n<li>打开CMD通过<code>set [name]</code>命令查看环境变量是否配置成功</li>\n<li>PowerShell中是通过<code>dir env:[name]</code>命令</li>\n</ul>\n</li>\n<li><p>NVM使用说明：</p>\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows/\" target=\"_blank\" rel=\"external\">https://github.com/coreybutler/nvm-windows/</a></li>\n</ul>\n</li>\n<li><p>NPM的目录之后使用再配置</p>\n</li>\n</ol>\n<h3 id=\"配置Python环境\"><a href=\"#配置Python环境\" class=\"headerlink\" title=\"配置Python环境\"></a>配置Python环境</h3><blockquote>\n<p>Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译<br>确保全局环境中可以使用python命令</p>\n</blockquote>\n<h3 id=\"环境变量的概念\"><a href=\"#环境变量的概念\" class=\"headerlink\" title=\"环境变量的概念\"></a>环境变量的概念</h3><blockquote>\n<p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>\n</blockquote>\n<ul>\n<li>Windows中环境变量分为系统变量和用户变量</li>\n<li>环境变量的变量名是不区分大小写的</li>\n<li>特殊值：<ul>\n<li>PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Windows下常用的命令行操作\"><a href=\"#Windows下常用的命令行操作\" class=\"headerlink\" title=\"Windows下常用的命令行操作\"></a>Windows下常用的命令行操作</h3><ul>\n<li>切换当前目录（change directory）：cd</li>\n<li>创建目录（make directory）：mkdir</li>\n<li>查看当前目录列表（directory）：dir<ul>\n<li>别名：ls（list）</li>\n</ul>\n</li>\n<li>清空当前控制台：cls<ul>\n<li>别名：clear</li>\n</ul>\n</li>\n<li>删除文件：del<ul>\n<li>别名：rm</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：所有别名必须在新版本的 PowerShell 中使用</p>\n</blockquote>\n<hr>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><hr>\n<h2 id=\"事件驱动和非阻塞\"><a href=\"#事件驱动和非阻塞\" class=\"headerlink\" title=\"事件驱动和非阻塞\"></a>事件驱动和非阻塞</h2><hr>\n<h2 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h2>","excerpt":"","more":"<h2 id=\"Node简介\"><a href=\"#Node简介\" class=\"headerlink\" title=\"Node简介\"></a>Node简介</h2><h3 id=\"客户端的JavaScript是怎样的\"><a href=\"#客户端的JavaScript是怎样的\" class=\"headerlink\" title=\"客户端的JavaScript是怎样的\"></a>客户端的JavaScript是怎样的</h3><ul>\n<li><p>什么是 JavaScript？</p>\n<ul>\n<li>脚本语言</li>\n<li>运行在浏览器中</li>\n<li>一般用来做客户端页面的交互（Interactive）</li>\n</ul>\n</li>\n<li><p>JavaScript 的运行环境？</p>\n<ul>\n<li>是不是运行在浏览器呢？</li>\n<li>不够严谨</li>\n<li>运行在浏览器内核中的 JS 引擎（engine）</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 可以做什么？</p>\n<ul>\n<li>操作DOM（对DOM的增删改、注册事件）</li>\n<li>AJAX/跨域</li>\n<li>BOM（页面跳转、历史记录、console.log()、alert()）</li>\n<li>ECMAScript</li>\n</ul>\n</li>\n<li><p>浏览器中的 JavaScript 不可以做什么？</p>\n<ul>\n<li>文件操作（文件和文件夹的CRUD）</li>\n<li>没有办法操作系统信息</li>\n<li>由于运行环境特殊（我们写的代码是在不认识的人的浏览器中运行）</li>\n</ul>\n</li>\n<li><p>在开发人员能力相同的情况下编程语言的能力取决于什么？</p>\n<ul>\n<li>-语言本身？-</li>\n<li>语言本身只是提供定义变量，定义函数，定义类型，流程控制，循环结构之类的操作</li>\n<li>取决于运行该语言的平台（环境）</li>\n<li>对于JS来说，我们常说的JS实际是ES，大部分能力都是由浏览器的执行引擎决定</li>\n<li>BOM和DOM可以说是浏览器开放出来的接口</li>\n<li><p>比如：Cordova中提供JS调用摄像头，操作本地文件的API</p>\n</li>\n<li><p>Java既是语言也是平台</p>\n</li>\n<li>Java运行在Java虚拟机（跨操作系统）</li>\n<li><p>PHP既是语言也是平台（跨操作系统）</p>\n</li>\n<li><p>C#语言平台：.NET Framework（Windows）</p>\n</li>\n<li>C#可以运行在MONO这样的平台</li>\n<li>因为有人需要将C#运行在Linux平台，所有出现了MONO</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>JavaScript 只可以运行在浏览器中吗？<ul>\n<li>不是</li>\n<li>能运行在哪取决于，这个环境有没有特定平台</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是Node\"><a href=\"#什么是Node\" class=\"headerlink\" title=\"什么是Node\"></a>什么是Node</h3><ul>\n<li>Node 就是 JavaScript 语言在服务器端的运行环境</li>\n<li>所谓“运行环境（平台）”有两层意思：<ul>\n<li>首先，JavaScript 语言通过 Node 在服务器运行，在这个意义上，Node 有点像 JavaScript 虚拟机；</li>\n<li>其次，Node 提供大量工具库，使得 JavaScript 语言与操作系统互动（比如读写文件、新建子进程），在这个意义上， Node 又是 JavaScript 的工具库。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么是JavaScript\"><a href=\"#为什么是JavaScript\" class=\"headerlink\" title=\"为什么是JavaScript\"></a>为什么是JavaScript</h3><h3 id=\"Node的实现结构\"><a href=\"#Node的实现结构\" class=\"headerlink\" title=\"Node的实现结构\"></a>Node的实现结构</h3><h3 id=\"Node在当下Web开发领域的应用\"><a href=\"#Node在当下Web开发领域的应用\" class=\"headerlink\" title=\"Node在当下Web开发领域的应用\"></a>Node在当下Web开发领域的应用</h3><h3 id=\"哪些公司在用\"><a href=\"#哪些公司在用\" class=\"headerlink\" title=\"哪些公司在用\"></a>哪些公司在用</h3><h3 id=\"重点理解\"><a href=\"#重点理解\" class=\"headerlink\" title=\"重点理解\"></a>重点理解</h3><ul>\n<li>Node是一个JavaScript的运行环境（平台），不是一门语言，也不是JavaScript的框架；</li>\n<li>Node的实现结构；</li>\n<li>Node可以用来开发服务端应用程序，Web系统；</li>\n<li>基于Node的前端工具集</li>\n</ul>\n<hr>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><h3 id=\"安装包的方式安装\"><a href=\"#安装包的方式安装\" class=\"headerlink\" title=\"安装包的方式安装\"></a>安装包的方式安装</h3><ul>\n<li>安装包下载链接：<ul>\n<li>Mac OSX： <a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0.pkg\">darwin</a></li>\n<li>Windows：<ul>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x64.msi\">x64</a></li>\n<li><a href=\"http://npm.taobao.org/mirrors/node/v5.7.0/node-v5.7.0-x86.msi\">x86</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安装操作：<ul>\n<li>一路<em>Next</em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"更新版本\"><a href=\"#更新版本\" class=\"headerlink\" title=\"更新版本\"></a>更新版本</h3><ul>\n<li>操作方式：<ul>\n<li>重新下载最新的安装包；</li>\n<li>覆盖安装即可；</li>\n</ul>\n</li>\n<li>问题：<ul>\n<li>以前版本安装的很多全局的工具包需要重新安装</li>\n<li>无法回滚到之前的版本</li>\n<li>无法在多个版本之间切换（很多时候我们要使用特定版本）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"NVM工具的使用\"><a href=\"#NVM工具的使用\" class=\"headerlink\" title=\"NVM工具的使用\"></a>NVM工具的使用</h3><blockquote>\n<p>Node Version Manager（Node版本管理工具）</p>\n</blockquote>\n<p>由于以后的开发工作可能会在多个Node版本中测试，而且Node的版本也比较多，所以需要这么款工具来管理</p>\n<h4 id=\"安装操作步骤\"><a href=\"#安装操作步骤\" class=\"headerlink\" title=\"安装操作步骤\"></a>安装操作步骤</h4><ol>\n<li>下载：<a href=\"https://github.com/coreybutler/nvm-windows/releases/download/1.1.0/nvm-noinstall.zip\">nvm-windows</a></li>\n<li>解压到一个全英文路径</li>\n<li><p>编辑解压目录下的<code>settings.txt</code>文件（不存在则新建）</p>\n<ul>\n<li><code>root 配置为当前 nvm.exe 所在目录</code></li>\n<li><code>path 配置为 node 快捷方式所在的目录</code></li>\n<li><code>arch 配置为当前操作系统的位数（32/64）</code></li>\n<li><code>proxy 不用配置</code></li>\n</ul>\n</li>\n<li><p>配置环境变量 可以通过 window+r  : sysdm.cpl</p>\n<ul>\n<li><code>NVM_HOME = 当前 nvm.exe 所在目录</code></li>\n<li><code>NVM_SYMLINK = node 快捷方式所在的目录</code></li>\n<li><code>PATH += %NVM_HOME%;%NVM_SYMLINK%;</code></li>\n<li>打开CMD通过<code>set [name]</code>命令查看环境变量是否配置成功</li>\n<li>PowerShell中是通过<code>dir env:[name]</code>命令</li>\n</ul>\n</li>\n<li><p>NVM使用说明：</p>\n<ul>\n<li><a href=\"https://github.com/coreybutler/nvm-windows/\">https://github.com/coreybutler/nvm-windows/</a></li>\n</ul>\n</li>\n<li><p>NPM的目录之后使用再配置</p>\n</li>\n</ol>\n<h3 id=\"配置Python环境\"><a href=\"#配置Python环境\" class=\"headerlink\" title=\"配置Python环境\"></a>配置Python环境</h3><blockquote>\n<p>Node中有些第三方的包是以C/C++源码的方式发布的，需要安装后编译<br>确保全局环境中可以使用python命令</p>\n</blockquote>\n<h3 id=\"环境变量的概念\"><a href=\"#环境变量的概念\" class=\"headerlink\" title=\"环境变量的概念\"></a>环境变量的概念</h3><blockquote>\n<p>环境变量就是操作系统提供的系统级别用于存储变量的地方</p>\n</blockquote>\n<ul>\n<li>Windows中环境变量分为系统变量和用户变量</li>\n<li>环境变量的变量名是不区分大小写的</li>\n<li>特殊值：<ul>\n<li>PATH 变量：只要添加到 PATH 变量中的路径，都可以在任何目录下搜索</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Windows下常用的命令行操作\"><a href=\"#Windows下常用的命令行操作\" class=\"headerlink\" title=\"Windows下常用的命令行操作\"></a>Windows下常用的命令行操作</h3><ul>\n<li>切换当前目录（change directory）：cd</li>\n<li>创建目录（make directory）：mkdir</li>\n<li>查看当前目录列表（directory）：dir<ul>\n<li>别名：ls（list）</li>\n</ul>\n</li>\n<li>清空当前控制台：cls<ul>\n<li>别名：clear</li>\n</ul>\n</li>\n<li>删除文件：del<ul>\n<li>别名：rm</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：所有别名必须在新版本的 PowerShell 中使用</p>\n</blockquote>\n<hr>\n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2><hr>\n<h2 id=\"事件驱动和非阻塞\"><a href=\"#事件驱动和非阻塞\" class=\"headerlink\" title=\"事件驱动和非阻塞\"></a>事件驱动和非阻塞</h2><hr>\n<h2 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h2>"},{"title":"淘宝提供Rubygems国内镜像站点","date":"2016-05-02T08:20:16.000Z","_content":"阿里巴巴作为国内互联网行业一把手，一直比较看重技术，特别是在国外新兴技术的引进和普及上面花了很大功夫。\n\nNPM官方数据源不稳定，提供[CNPM](http://npm.taobao.org)服务，做到与官方每10分钟同步一次。\n\nRubygems也是一样，彻底离开广大“天朝”统治的GFW（Rubygems是托管在Amazon S3上的），任然是淘宝提供了国内最稳定的镜像站点。\n\n使用方式很简单：\n\n```shell\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n\n如果你使用 Gemfile 和 Bundle (例如：Rails 项目)\n\n```shell\n$ bundle config mirror.https://rubygems.org https://ruby.taobao.org\n```\n\n这样你不用改你的 Gemfile 的 source。\n\n```shell\nsource 'https://rubygems.org/'\ngem 'rails', '4.1.0'\n```\n","source":"_posts/taobao-mirrors-rubygems.md","raw":"---\ntitle: 淘宝提供Rubygems国内镜像站点\ndate: 2016-05-02 16:20:16\ntags:\n  Ruby\n---\n阿里巴巴作为国内互联网行业一把手，一直比较看重技术，特别是在国外新兴技术的引进和普及上面花了很大功夫。\n\nNPM官方数据源不稳定，提供[CNPM](http://npm.taobao.org)服务，做到与官方每10分钟同步一次。\n\nRubygems也是一样，彻底离开广大“天朝”统治的GFW（Rubygems是托管在Amazon S3上的），任然是淘宝提供了国内最稳定的镜像站点。\n\n使用方式很简单：\n\n```shell\n$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/\n$ gem sources -l\n*** CURRENT SOURCES ***\n\nhttps://ruby.taobao.org\n# 请确保只有 ruby.taobao.org\n$ gem install rails\n```\n\n如果你使用 Gemfile 和 Bundle (例如：Rails 项目)\n\n```shell\n$ bundle config mirror.https://rubygems.org https://ruby.taobao.org\n```\n\n这样你不用改你的 Gemfile 的 source。\n\n```shell\nsource 'https://rubygems.org/'\ngem 'rails', '4.1.0'\n```\n","slug":"taobao-mirrors-rubygems","published":1,"updated":"2016-05-02T08:24:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cinpqyyw4000hu5i1d1wa5r5h","content":"<p>阿里巴巴作为国内互联网行业一把手，一直比较看重技术，特别是在国外新兴技术的引进和普及上面花了很大功夫。</p>\n<p>NPM官方数据源不稳定，提供<a href=\"http://npm.taobao.org\" target=\"_blank\" rel=\"external\">CNPM</a>服务，做到与官方每10分钟同步一次。</p>\n<p>Rubygems也是一样，彻底离开广大“天朝”统治的GFW（Rubygems是托管在Amazon S3上的），任然是淘宝提供了国内最稳定的镜像站点。</p>\n<p>使用方式很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure>\n<p>如果你使用 Gemfile 和 Bundle (例如：Rails 项目)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bundle config mirror.https://rubygems.org https://ruby.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样你不用改你的 Gemfile 的 source。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://rubygems.org/&apos;</span><br><span class=\"line\">gem &apos;rails&apos;, &apos;4.1.0&apos;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>阿里巴巴作为国内互联网行业一把手，一直比较看重技术，特别是在国外新兴技术的引进和普及上面花了很大功夫。</p>\n<p>NPM官方数据源不稳定，提供<a href=\"http://npm.taobao.org\">CNPM</a>服务，做到与官方每10分钟同步一次。</p>\n<p>Rubygems也是一样，彻底离开广大“天朝”统治的GFW（Rubygems是托管在Amazon S3上的），任然是淘宝提供了国内最稳定的镜像站点。</p>\n<p>使用方式很简单：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</span><br><span class=\"line\">$ gem sources -l</span><br><span class=\"line\">*** CURRENT SOURCES ***</span><br><span class=\"line\"></span><br><span class=\"line\">https://ruby.taobao.org</span><br><span class=\"line\"># 请确保只有 ruby.taobao.org</span><br><span class=\"line\">$ gem install rails</span><br></pre></td></tr></table></figure>\n<p>如果你使用 Gemfile 和 Bundle (例如：Rails 项目)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bundle config mirror.https://rubygems.org https://ruby.taobao.org</span><br></pre></td></tr></table></figure>\n<p>这样你不用改你的 Gemfile 的 source。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &apos;https://rubygems.org/&apos;</span><br><span class=\"line\">gem &apos;rails&apos;, &apos;4.1.0&apos;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cinpqyyuu0000u5i132hn2u0q","tag_id":"cinpqyyv80002u5i15yegkjyk","_id":"cinpqyyvm0007u5i1a5ohdger"},{"post_id":"cinpqyyv40001u5i12kt652lq","tag_id":"cinpqyyv80002u5i15yegkjyk","_id":"cinpqyyvu000bu5i1wryffejj"},{"post_id":"cinpqyyvc0003u5i1c1ucnfwu","tag_id":"cinpqyyv80002u5i15yegkjyk","_id":"cinpqyyw3000fu5i1da4emzgv"},{"post_id":"cinpqyyve0004u5i1e2ju9vxh","tag_id":"cinpqyyvz000du5i1gm5hgz00","_id":"cinpqyyw5000ju5i19tuspgzc"},{"post_id":"cinpqyyvm0008u5i11k1di894","tag_id":"cinpqyyw5000iu5i1xtlh7j2q","_id":"cinpqyyw6000lu5i11esmoab1"},{"post_id":"cinpqyyvr000au5i13qcxaxei","tag_id":"cinpqyyw6000ku5i1xdvcn4v9","_id":"cinpqyyw6000nu5i1sw287hbi"},{"post_id":"cinpqyyvv000cu5i11vxr52tv","tag_id":"cinpqyyw6000mu5i15uyt4f1z","_id":"cinpqyyw7000pu5i14ql1dnl1"},{"post_id":"cinpqyyw0000eu5i1duyrkwjf","tag_id":"cinpqyyw6000ou5i1r00styn4","_id":"cinpqyywa000ru5i1yxlovv7x"},{"post_id":"cinpqyyw3000gu5i1s1gbgxch","tag_id":"cinpqyyw6000mu5i15uyt4f1z","_id":"cinpqyywb000tu5i18jppyyoj"},{"post_id":"cinpqyyw4000hu5i1d1wa5r5h","tag_id":"cinpqyywa000su5i1alkgltio","_id":"cinpqyywb000uu5i1n9os6gp0"}],"Tag":[{"name":"Angular","_id":"cinpqyyv80002u5i15yegkjyk"},{"name":"Chrome AJAX Sublime","_id":"cinpqyyvz000du5i1gm5hgz00"},{"name":"JavaScript","_id":"cinpqyyw5000iu5i1xtlh7j2q"},{"name":"模块化","_id":"cinpqyyw6000ku5i1xdvcn4v9"},{"name":"Node","_id":"cinpqyyw6000mu5i15uyt4f1z"},{"name":"Node NPM","_id":"cinpqyyw6000ou5i1r00styn4"},{"name":"Ruby","_id":"cinpqyywa000su5i1alkgltio"}]}}